#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################
Anlominus="Anlominus"
# Name : Anlominus ~ HacKingPro
# Description : HacKingPro ~ enter your target and Hack Him in the end get Markdown Report.
# Created Date : 2022 May
# Last UPDATE : 2022 Jul 1
# Aouther: Anlominus ~> RhytMix ~> HacKingPro
# Skils: Best Copywriter IN the COSMOS!
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE GREAT SCRIPTS
# CREDIT: To All World Creators free Scripts & Tools
# Location: Made With LOVE IN ISRAEL !
# Source: https://github.com/Anlominus/HacKingPro
###############################################
clear
chmod +x HacKingPro
# Directories

# Define Colors Variables
HacKingProColors(){
##############################################################################
# COLORS AND BACKGROUNDS
##############################################################################
Color_Off='\033[0m' # Text Reset

# Regular Colors
Black='\033[0;30m'  # Black
Red='\033[0;31m'    # Red
Green='\033[0;32m'  # Green
Yellow='\033[0;33m' # Yellow
Blue='\033[0;34m'   # Blue
Purple='\033[0;35m' # Purple
Cyan='\033[0;36m'   # Cyan
White='\033[0;97m'  # White

# Additional colors
LGrey='\033[0;37m'   # Ligth Gray
DGrey='\033[0;90m'   # Dark Gray
LRed='\033[0;91m'    # Ligth Red
LGreen='\033[0;92m'  # Ligth Green
LYellow='\033[0;93m' # Ligth Yellow
LBlue='\033[0;94m'   # Ligth Blue
LPurple='\033[0;95m' # Light Purple
LCyan='\033[0;96m'   # Ligth Cyan


# Bold
BBlack='\033[1;30m'  # Black
BRed='\033[1;31m'    # Red
BGreen='\033[1;32m'  # Green
BYellow='\033[1;33m' # Yellow
BBlue='\033[1;34m'   # Blue
BPurple='\033[1;35m' # Purple
BCyan='\033[1;36m'   # Cyan
BWhite='\033[1;37m'  # White

# Underline
UBlack='\033[4;30m'  # Black
URed='\033[4;31m'    # Red
UGreen='\033[4;32m'  # Green
UYellow='\033[4;33m' # Yellow
UBlue='\033[4;34m'   # Blue
UPurple='\033[4;35m' # Purple
UCyan='\033[4;36m'   # Cyan
UWhite='\033[4;37m'  # White

# Background
On_Black='\033[40m'  # Black
On_Red='\033[41m'    # Red
On_Green='\033[42m'  # Green
On_Yellow='\033[43m' # Yellow
On_Blue='\033[44m'   # Blue
On_Purple='\033[45m' # Purple
On_Cyan='\033[46m'   # Cyan
On_White='\033[47m'  # White
}
HacKingProColors

Anlominus="AnLoMinus"
MyVersion="${BGreen}v4.0.0.4"

HacKingPro=$(echo "${BRed}Hac${BYellow}King${BBlue}Pro")
HacKingProPWD=$(pwd)
HacKingProDavid=$(echo "\n\t  ${BRed}[${BCyan}✡${BRed}] ${HacKingPro} ${BRed}[${BCyan}✡${BRed}]\n\t\t ${BGreen}")
HacKingProExit=$(echo "\n\t\t ${BRed}[${BCyan}✡${BRed}] ${BCyan}Exit ${HacKingPro} ${BRed}[${BCyan}✡${BRed}]\n\t\t ${BGreen}")

Press_ENTER=$(echo "\n\n${BYellow}                🔶    Press ENTER    🔶     ${BGreen}\n\n")
Press_Enter_To_START=$(echo "\n\n${BYellow}                🔶    Press Enter To START    🔶     ${BGreen}\n\n")

# HacKingPro Logo Variable
HacKingProLogo1(){
  HacKingProLogo_1="$(
  echo "${BBlue}
${BRed}          █████   █████                    ${BYellow}█████   ████  ███                      ${BBlue}███████████
${BRed}         ░░███   ░░███                    ${BYellow}░░███   ███░  ░░░   ${MyVersion}           ${BBlue}░░███░░░░░███ ${Anlominus}
${BRed}          ░███    ░███   ██████    ██████  ${BYellow}░███  ███    ████  ████████    ███████ ${BBlue}░███    ░███ ████████   ██████
${BRed}          ░███████████  ░░░░░███  ███░░███ ${BYellow}░███████    ░░███ ░░███░░███  ███░░███ ${BBlue}░██████████ ░░███░░███ ███░░███
${BRed}          ░███░░░░░███   ███████ ░███ ░░░  ${BYellow}░███░░███    ░███  ░███ ░███ ░███ ░███ ${BBlue}░███░░░░░░   ░███ ░░░ ░███ ░███
${BRed}          ░███    ░███  ███░░███ ░███  ███ ${BYellow}░███ ░░███   ░███  ░███ ░███ ░███ ░███ ${BBlue}░███         ░███     ░███ ░███
${BRed}          █████   █████░░████████░░██████  ${BYellow}█████ ░░████ █████ ████ █████░░███████ ${BBlue}█████        █████    ░░██████
${BRed}         ░░░░░   ░░░░░  ░░░░░░░░  ░░░░░░  ${BYellow}░░░░░   ░░░░ ░░░░░ ░░░░ ░░░░░  ░░░░░███${BBlue}░░░░░        ░░░░░      ░░░░░░
${BYellow}                                                                         ███ ░███
${BYellow}                                                                        ░░██████
${BYellow}                                                                         ░░░░░░                              ")"
echo "$HacKingProLogo_1"
# echo "$HacKingProDavid"
}

# Paths Directories to Tools
xDirectories(){
  XHacKingPro="$HOME/HacKingPro"
  xMenu00="${XHacKingPro}/Menu/00--Anonymity"
  xMenu01="${XHacKingPro}/Menu/01--Information Gathering"
  xMenu01_CAO="${XHacKingPro}/Menu/01--Information Gathering/CAO - Collecting All in One/"
  xMenu01_CNI="${XHacKingPro}/Menu/01--Information Gathering/CNI - Collecting Network Information/"
  xMenu01_CMI="${XHacKingPro}/Menu/01--Information Gathering/CMI - Collecting Machine Information/"
  xMenu01_CMI_LI="${XHacKingPro}/Menu/01--Information Gathering/CMI - Collecting Machine Information/LI - Local Information/"
  xMenu01_CSI="${XHacKingPro}/Menu/01--Information Gathering/CSI - Collecting Social Information/"
  xMenu02="${XHacKingPro}/Menu/02--Scanning & Vulnerability Assessment"
  xMenu03="${XHacKingPro}/Menu/03--Web Application HacKing"
  xMenu04="${XHacKingPro}/Menu/04--Database Assessment"
  xMenu05="${XHacKingPro}/Menu/05--Password HacKing"
  xMenu06="${XHacKingPro}/Menu/06--Wireless HacKing"
  xMenu07="${XHacKingPro}/Menu/07--Exploit Frameworks & DataBases"
  xMenu08="${XHacKingPro}/Menu/08--Post-Exploitation Frameworks"
  xMenu09="${XHacKingPro}/Menu/09--Sniffing - Spoofing"
  xMenu11="${XHacKingPro}/Menu/11--Digital Forensic"
  xMenu12="${XHacKingPro}/Menu/12--Analysis & Reporting"
  xMenu14="${XHacKingPro}/Menu/14--Privilege Enumeration & Escalation"
  xMenu15="${XHacKingPro}/Menu/15--Malware Tools"
  xMenuM="${XHacKingPro}/Menu/M--Monitoring"
  xMenuCC="${XHacKingPro}/Menu/CC--Card Checker"
  xMenuCL="${XHacKingPro}/Menu/CL--Check Lists"
  xMenuCS="${XHacKingPro}/Menu/CS--Cheat Sheets"
  xMenuMH="${XHacKingPro}/Menu/MH--Mobile HacKing"
  xMenuMV="${XHacKingPro}/Menu/MV--Markdown Viewers"
  xMenuPT="${XHacKingPro}/Menu/PT--Penetration Testing"
  xMenuRE="${XHacKingPro}/Menu/RE--Reverse Engineering"
  xMenuRS="${XHacKingPro}/Menu/RS--Reverse Shell"
  xMenuSE="${XHacKingPro}/Menu/SE--Social Engineering"
  xMenuAIO="${XHacKingPro}/Menu/AIO--All In One"
  xMenuCHT="${XHacKingPro}/Menu/CHT--Car Hacking Tools"
  xMenuRAT="${XHacKingPro}/Menu/RAT--Remote Access Trojan"
  xMenuSIP="${XHacKingPro}/Menu/SIP--Session Initiation Protocol"
  xMenuWFA="${XHacKingPro}/Menu/WFA--FireWall Applications"
  xMenuKoTH="${XHacKingPro}/Menu/KoTH--King of The Hill"
  if [ $XHacKingPro == $HacKingProPWD ]; then
    #statements
    XHacKingPro="$HOME/HacKingPro"
    HacKingProLogo1
    cd $XHacKingPro
    echo "\n\t  ${BYellow}[${BGreen}!!${BYellow}] ${BGreen}Working Direction: ${BCyan} $XHacKingPro\n"
    echo "\n\t  ${BYellow}[${BGreen}!!${BYellow}] ${BGreen}Running Direction: ${BCyan} $HOME/HacKingPro\n"
    echo "\n\t  ${BYellow}[${BGreen}!!${BYellow}] ${BGreen}Listing Menu: ${BCyan}ls Menu\n\n"
    ls Menu
    read -p "${Press_Enter_To_START}"
  else
    XHacKingPro="$HOME/Documents/GitHub/HacKingPro"
    HacKingProLogo1
    # cd $XHacKingPro
    echo "\n\t  ${BYellow}[${BGreen}!!${BYellow}] ${BGreen}Working Direction: ${BCyan} $XHacKingPro\n"
    echo "\n\t  ${BYellow}[${BGreen}!!${BYellow}] ${BGreen}Running Direction: ${BCyan} $HacKingProPWD\n"
    echo "\n\t  ${BYellow}[${BGreen}!!${BYellow}] ${BGreen}Listing Menu: ${BCyan}ls Menu\n\n"
    ls Menu
    read -p "${Press_Enter_To_START}"
  fi

}
xDirectories

# Checking For System Package Manager
Check_System() {
  # checking for system package manager
  if [ -e /data/data/com.termux/files/usr/bin/pkg ]; then
  pac="pkg"
  system="termux"
  elif [ `command -v brew` ]; then
    pac="brew"
    system="mac"
    sudo=""
  elif [ `command -v apt` ]; then
    pac="apt"
    system="linux"
  elif [ `command -v apt-get` ]; then
    pac="apt-get"
    system="linux"
  elif [ `command -v apk` ]; then
    pac="apk"
    system="linux"
  elif [ `command -v yum` ]; then
    pac="yum"
    system="fedora"
  fi

  # checking for system root access
  if [ `command -v sudo` ]; then
    sudo="sudo"
  else
    sudo=""
  fi

  # checking for system home dir
  if [ -d $HOME ]; then
    home=$HOME
  else
    home="~/"
  fi

  # checking for system bin dir
  if [ -d /data/data/com.termux/files/usr/bin ]; then
    bin="/data/data/com.termux/files/usr/bin"
  elif [ -d /usr/local/bin ]; then
    bin="/usr/local/bin"
  elif [ -d /bin ]; then
    bin="/bin"
  elif [ -d /sbin ]; then
    bin="/sbin"
  fi

}
Check_System

# Arsenal Cheatsheets
Arsenal(){
  clear
  # Getting Arsenal Cheatsheets
  if [[ -d $HOME/opt/anaconda3/bin/arsenal ]]; then
    #statements
    echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${BYellow}Arsenal Installed  \n"
    break
  else
    echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${BYellow}Creating Folder Arsenal \n"
    mkdir Arsenal
    echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${LYellow}Cloning Into [./Arsenal] \n"
    git clone https://github.com/Orange-Cyberdefense/Arsenal ./Arsenal
    echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${BYellow}cd Into Arsenal\n"
    cd Arsenal
    echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${BYellow}List Arsenal Directories \n"
    ls -lahs
    echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${BYellow}Installing Arsenal Requirements \n"
    python3 -m pip install -r requirements.txt
    echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${BYellow}Arsenal Run Installation  \n"
    ./run
    if [[ $? == 1 ]]; then
      #statements
      echo "\n\t\t ${BRed}[${LGrey}CS${BRed}]${BBlue} - ${BYellow}Arsenal Installation ${BRed} ERROR  \n"
    fi
    echo "\n\n"
    read -p "$Press_ENTER" ReaDone
  fi
  cd ..

}

# Planning and Scoping
HacKingProPlanning(){
  clear
  HacKingProLogo1
  cd $XHacKingPro
  echo "\n\t\t${BRed}[${LGrey}P${BRed}]${BBlue} - ${LGrey}Planning and Scoping\n"
  #
  t2="$(echo "\n\t\t${BBlue}[${BRed}?${BBlue}]${BGreen} - Name of Target / Client: ${BRed}")"
  read -p "$t2" targetNAME
  if [ -z $targetNAME ]; then
    #statements
    targetNAME="ChangeMe"
    echo "\n\t\t${BRed}[${LGrey}TN${BRed}]${BBlue} - ${LGrey}Target Name ${BBlue} $targetNAME\n"
  fi
  #
  if [ -d Case ]; then
    #statements
    echo "\n\t\t${BRed}[${BYellow}✅${BRed}]${BBlue} - ${BYellow}Case Folder Exists, Continue to it\n"
    cd Case
    echo "\n\t\t${BRed}[${BYellow}✅${BRed}]${BBlue} - ${BYellow}Creating $targetNAME and Continue to it\n"
    mkdir $targetNAME
    cd $targetNAME
    echo "\n\t\t${BRed}[${BYellow}✅${BRed}]${BBlue} - ${BYellow}Creating Case Planning and Continue to it\n"
    mkdir Planning
    cd Planning
  else
    echo "\n\t\t${BRed}[${BYellow}✅${BRed}]${BBlue} - ${BYellow}Creating Case Folder and Continue to it\n"
    mkdir Case
    cd Case
    echo "\n\t\t${BRed}[${BYellow}✅${BRed}]${BBlue} - ${BYellow}Creating $targetNAME and Continue to it\n"
    mkdir $targetNAME
    cd $targetNAME
    echo "\n\t\t${BRed}[${BYellow}✅${BRed}]${BBlue} - ${BYellow}Creating Case Planning and Continue to it\n"
    mkdir Planning
    cd Planning
  fi

  #
  file="${targetNAME}-HacKingPro-Planning-Log.md"
  if [ -e ${file} ]; then
    t5="$(echo "\n  ${BBlue}[${BRed}!${BBlue}] ${BRed}File Exist! ${LRed}Remove it? [yY/nN]: ")"
    read -p "$t5 " filexist
    case $filexist in
      y|Y)
      echo "  ${BBlue}[${BGreen}!${BBlue}] ${BGreen}Removing {${targetNAME}-HacKingPro-Planning-Log.md} file .."
      rm ${targetNAME}-HacKingPro-Planning-Log.md
      ;;
      n|N)
      echo "  ${BBlue}[${BRed}!${BBlue}] Leaving {${targetNAME}-HacKingPro-Planning-Log.md} file and Add to it .."
      ;;
    esac
  fi
  # Recommended Open With `Atom` Editor For Normal View.
  echo "# Recommended Open With [Atom]() or [Obsidian]() Editor For Normal View." >> ${targetNAME}-HacKingPro-Planning-Log.md
  echo "### Case Date: `date`" >> ${targetNAME}-HacKingPro-Planning-Log.md
  echo "> - ### Target Name: ${targetNAME}" >> ${targetNAME}-HacKingPro-Planning-Log.md


  #
  t1="$(echo "\n\t\t${BBlue}[${BRed}?${BBlue}]${BGreen} - IP / Host of Target / Client: ${BRed}")"
  read -p "$t1" targetIP
  if [ -z $targetIP ]; then
    #statements
    targetIP="127.0.0.1"
    # targetIP=" "
  fi
  echo "> - ### Target IP: ${targetIP}" >> ${targetNAME}-HacKingPro-Planning-Log.md

  #
  t3="$(echo "\n\t\t${BBlue}[${BRed}?${BBlue}]${BGreen} - Email of Target: ${BRed}")"
  read -p "$t3" targetEmail
  if [ -z $targetEmail ]; then
    #statements
    targetEmail="ChangeMe"
    echo "\n\t\t${BRed}[${LGrey}TE${BRed}]${BBlue} - ${LGrey}Target Email ${BBlue} $targetEmail\n"
  fi
  echo "> - ### Target Email: ${targetEmail}" >> ${targetNAME}-HacKingPro-Planning-Log.md

  #
  t4="$(echo "\n\t\t${BBlue}[${BRed}?${BBlue}]${BGreen} - Phone of Target (With Country Code): ${BRed}")"
  read -p "$t4" targetPhone
  if [ -z $targetPhone ]; then
    #statements
    targetPhone="ChangeMe"
    echo "\n\t\t${BRed}Target Name: ${BRed} $targetPhone"
  fi
  echo "> - ### Target Phone: ${targetPhone}" >> ${targetNAME}-HacKingPro-Planning-Log.md

  #
  ls
  cd $XHacKingPro
}

# HacKingPro Main Menu
MainMenu(){
  while true; do
  #statements
  clear
  HacKingProLogo1

  HacKingProTargetStatus=$(echo "\n
          ${BRed}[${DGrey}P${BRed}]${BBlue} -${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}=======================================================================================
          ${BRed}[${DGrey}I${BRed}]${BBlue} - ${DGrey}Install HacKingPro On the System")

  HacKingProMenuMain=$(echo "${BRed}
          ${BBlue}[${BYellow}#${BBlue}] ${BYellow} 📜 Main Menu ⌖"

          echo "$HacKingProTargetStatus""

          ${BRed}[${DGrey}00${BRed}]${BBlue} - ${DGrey}Anonymity
          ${BRed}[${DGrey}01${BRed}]${BBlue} - ${DGrey}Information Gathering
          ${BRed}[${DGrey}02${BRed}]${BBlue} - ${DGrey}Reconnaissance & Vulnerability Assessment
          ${BRed}[${BBlack}03${BRed}]${BBlue} - ${BBlack}Web Application HacKing 🕸
          ${BRed}[${BBlack}04${BRed}]${BBlue} - ${BBlack}Database Assessment
          ${BRed}[${BBlack}05${BRed}]${BBlue} - ${BBlack}Password HacKing
          ${BRed}[${BBlack}06${BRed}]${BBlue} - ${BBlack}Wireless HacKing
          ${BRed}[${BBlack}07${BRed}]${BBlue} - ${BBlack}Reverse Engineering
          ${BRed}[${BBlack}08${BRed}]${BBlue} - ${BBlack}Exploit Frameworks & DataBases
          ${BRed}[${BBlack}09${BRed}]${BBlue} - ${BBlack}Sniffing - Spoofing 👃🏼
          ${BRed}[${BBlack}10${BRed}]${BBlue} - ${BBlack}Gaining & Maintaining Access
          ${BRed}[${BBlack}11${BRed}]${BBlue} - ${BBlack}Digital Forensic
          ${BRed}[${BBlack}12${BRed}]${BBlue} - ${BBlack}Analysis & Reporting
          ${BRed}[${BBlack}13${BRed}]${BBlue} - ${BBlack}Social Engineering
          ${BRed}[${BBlack}14${BRed}]${BBlue} - ${BBlack}Privilege Enumeration & Escalation
          ${BRed}[${BBlack}15${BRed}]${BBlue} - ${BBlack}Malware Analysis Labs/Tools
          ${BRed}[${BBlack}16${BRed}]${BBlue} - ${BBlack}Covering Tracks 🫣
          ${BRed}[${DGrey}CS${BRed}]${BBlue} - ${DGrey}Cheat Sheets [${BCyan}Arsenal${DGrey}]
          ${BRed}[${BYellow}KoTH${BRed}]${BBlue} - ${BYellow}🤴🏼 King of The Hill ⛰

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close

          ${BCyan}┌──${BBlue}[${BCyan} Anlominus 👽${BRed} ${HacKingPro} ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
          ${BCyan}└──╼ ${BGreen}")
    read -p "$HacKingProMenuMain" cmd
    case $cmd in
      test )
      clear
      DoSomething=$(arp -a)
      PrintSomeThing=$(echo "\n\n`date`\n\n$DoSomething" )
      echo "$PrintSomeThing"
      read -p "$Press_ENTER"
      ;;
      ls )
      ls_lahs="$(echo "\n\t ${BRed}[🙏🏼${BRed}] ${BWhite}List Files ~ Executing: ls -lahs ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${HacKingPro}")"
      echo "$ls_lahs"
      sleep 2
      ls -lahs
      sleep 2
      read -p "$ls_lahs" cmd
      ;;
      p|P )
      HacKingProPlanning
      ;;
      li|LI )
      clear
      echo "\n\t${BRed}[${LGrey}LI${BRed}]${BBlue} - ${DGrey}Local Information"
      echo "\n\t${BRed}[${LGrey}🔸 ~ [ System info ] ~ 🔸${BRed}]"
      pingtest="\n\t $(ping 1.1.1.1 -c 1)"
      echo "\n\t${BRed}[${BYellow}@${BRed}]${BBlue} - ${Yellow}Checking@  InterNet Connection Ping !!!\n\t\t $pingtest"
      if [ $? == 0 ]; then
        #statements
        echo "\n\t${BRed}[${BGreen}!${BRed}]${BBlue} - ${BGreen}Found!  InterNet Connection Working !!!"
      else
        echo "\n\t${BRed}[${BRed}X${BRed}]${BBlue} - ${BRed}Error; No InterNet Connection; \n\t\t Check Your Connection and Come Back!!!"
      fi
      sleep 1
      echo "\n\t 🔸 ~ ${BBlue} Hostname: : ${BYellow} $(hostname)"
      echo "\n\t 🔸 ~ ${BBlue} Distro: ${BYellow} $(uname)"
      echo "\n\t 🔸 ~ ${BBlue} Kernel / Architecture: ${BYellow} $(uname -m)"
      echo "\n\t 🔸 ~ ${BBlue} Machine Hardware Processor Architecture Name: ${BYellow} $(uname -p)"
      echo "\n\t 🔸 ~ ${BBlue} Operating System Release: ${BYellow} $(uname -r)"
      echo "\n\t 🔸 ~ ${BBlue} Operating System Name: ${BYellow} $(uname -s)"
      echo "\n\t 🔸 ~ ${BBlue} Operating System Version: ${BYellow} $(uname -v)"
      read -p "$Press_ENTER" Som3T1ng
      ;;
      0|00 )
      clear
      HacKingProLogo1
      Anonymity(){
        while true; do
        #statements
        cd "$xMenu00"
        clear
        HacKingProLogo1
        HacKingProMenuMain=$(
        echo "${BRed}
          ${BBlue}[${BYellow}00${BBlue}] ${BYellow} 📜 Anonymity Menu

          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}=======================================================================================

          ${BRed}[${LGrey}01${BRed}]${BBlue} - ${DGrey}WhoAmI-Project
          ${BRed}[${LGrey}02${BRed}]${BBlue} - ${DGrey}Nullog
          ${BRed}[${LGrey}03${BRed}]${BBlue} - ${DGrey}MacChanger
          ${BRed}[${LGrey}04${BRed}]${BBlue} - ${DGrey}CoverMyAss

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close

          ${BCyan}┌──${BBlue}[${BCyan} Anlominus 👽${BRed} ${HacKingPro} ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
          ${BCyan}└──╼ ${BGreen}")
          read -p "$HacKingProMenuMain" cmd
          case $cmd in
            # l )
            # echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] This is your Current Location \n\t\t ${BGreen}"
            # pwd
            # sleep 0.3
            # echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] ls ${BYellow} 00--Anonymity \n\t\t ${BGreen}"
            # ls
            # sleep 0.3
            # echo "${BYellow}"
            # ;;
            p|P )
            HacKingProPlanning
            ;;
            ls )
            ls_lahs="$(echo "\n\t ${BRed}[🙏🏼${BRed}] ${BWhite}List Files ~ Executing: ls -lahs ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}")"
            echo "$ls_lahs"
            sleep 2
            ls -lahs
            sleep 2
            read -p "$ls_lahs" cmd
            ;;
            1|01 )
            clear
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] cd kali-whoami \n\t\t ${BGreen}"
            pwd
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] ls kali-whoami \n\t\t ${BGreen}"
            ls
            cd $xMenu00/WhoAmI-Project
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] Installing kali-whoami \n\t\t ${BGreen}"
            ls
            sleep 1
            sudo make install
            read -p "${Press_ENTER}" Som3T1ng
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] Checking Status \n\t\t ${BGreen}"
            sleep 1
            sudo bash kali-whoami --status
            read -p "${Press_ENTER}" Som3T1ng
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] Starting kali-whoami \n\t\t ${BGreen}"
            sleep 1
            sudo bash kali-whoami --start
            read -p "${Press_ENTER}" Som3T1ng
            cd ..
            ;;
            2|02 )
            clear
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] Starting Nullog \n\t\t ${BGreen}"
            sh $xMenu00/Nullog/nullog.sh
            ;;
            3|03 )
            clear
            cd $xMenu00/MacChanger
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] Starting MacChanger \n\t\t ${BGreen}"
            sh macchanger.sh
            ;;
            4|04 )
            clear
            cd $xMenu00/CoverMyAss
            echo "\n\t\t ${BBlue}[${BRed}!${BBlue}] Starting CoverMyAss \n\t\t ${BGreen}"
            sh CoverMyAss
            ;;
            x|X|exit|EXIT )
            cd $XHacKingPro
            clear
            break
            ;;
        esac
      done
      }
      Anonymity
      ;;
      01|1 )
      clear
      # Page Header
      while true; do
        #statements
        cd "$xMenu01"
        clear
        HacKingProLogo1
        HacKingProMenuMain=$(echo "${BRed}
          ${BBlue}[${BYellow}01${BBlue}] ${BYellow} 📜 Information Gathering Menu

          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}=======================================================================================

          ${BRed}[${DGrey}CAO${BRed}]${BBlue} - ${DGrey}All in One
          ${BRed}[${DGrey}CMI${BRed}]${BBlue} - ${DGrey}Machine Information
          ${BRed}[${DGrey}CNI${BRed}]${BBlue} - ${DGrey}Network Information
          ${BRed}[${DGrey}CSI${BRed}]${BBlue} - ${DGrey}Social Information

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close

          ${BCyan}┌──${BBlue}[${BCyan} Anlominus 👽${BRed} ${HacKingPro} ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
          ${BCyan}└──╼ ${BGreen}")
          read -p "$HacKingProMenuMain" cmd
          case $cmd in
            ls )
            ls_lahs="$(echo "\n\t ${BRed}[🙏🏼${BRed}] ${BWhite}List Files ~ Executing: ls -lahs ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}")"
            echo "$ls_lahs"
            sleep 2
            ls -lahs
            sleep 2
            read -p "$ls_lahs" cmd
            ;;
            p|P )
            HacKingProPlanning
            ;;
            x|X|exit|quit|Exit )
            clear
            cd ${XHacKingPro}
            HacKingPro=$(echo "${BRed}Hac${BYellow}King${BBlue}Pro")
            echo "\n\t\t ${BRed}[🙏🏼${BRed}] ${BWhite}Exit ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}"
            break
            ;;
            cao|CAO )
            while true; do
              #statements
              cd $xMenu01_CMI
              clear
              HacKingProLogo1
              HacKingProMenuMain=$(echo "${BRed}
          ${BBlue}[${BYellow}CAO${BBlue}] ${BYellow} 📜 Collecting All In One Menu

          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}=======================================================================================

          ${BRed}[${DGrey}CAO${BRed}]${BBlue} - ${BRed}[${DGrey}Collecting All in One${BRed}]:
                  ${BWhite} -${DGrey} This is All in One Tools,

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close

          ${BCyan}┌──${BBlue}[${BCyan} Anlominus 👽${BRed} ${HacKingPro} ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
          ${BCyan}└──╼ ${BGreen}")
                read -p "$HacKingProMenuMain" cmd
                case $cmd in
                  x|X|exit|quit|Exit )
                  clear
                  HacKingPro=$(echo "${BRed}Hac${BYellow}King${BBlue}Pro")
                  echo "\n\t\t ${BRed}[🙏🏼${BRed}] ${BWhite}Exit ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}"
                  break
                  ;;
                esac
              done
            ;;
            cni|CNI )
            while true; do
              #statements
              cd $xMenu01_CNI
              cd "SubDomain Information"
              clear
              HacKingProLogo1
              HacKingProMenuMain=$(echo "${BRed}
          ${BBlue}[${BYellow}CNI${BBlue}] ${BYellow} 📜 Collecting Network Information Menu

          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}=======================================================================================

          ${BRed}[${DGrey}01${BRed}]${BBlue} - ${DGrey}Bolt
          ${BRed}[${DGrey}02${BRed}]${BBlue} - ${DGrey}DNSExplorer
          ${BRed}[${DGrey}03${BRed}]${BBlue} - ${DGrey}Knock
          ${BRed}[${DGrey}04${BRed}]${BBlue} - ${DGrey}README.md
          ${BRed}[${DGrey}05${BRed}]${BBlue} - ${DGrey}ReconDog
          ${BRed}[${DGrey}06${BRed}]${BBlue} - ${DGrey}Sublist3r
          ${BRed}[${DGrey}07${BRed}]${BBlue} - ${DGrey}Subrake
          ${BRed}[${DGrey}08${BRed}]${BBlue} - ${DGrey}XRCross


                  ${BWhite} -${DGrey} Public / Private and Associated,
                  ${BWhite} -${DGrey} Domain Names,
                  ${BWhite} -${DGrey} Network Hosts,
                  ${BWhite} -${DGrey} Public and Private IP Blocks,
                  ${BWhite} -${DGrey} Routing Tables, TCP and UDP Running Services,
                  ${BWhite} -${DGrey} SSL Certificates,
                  ${BWhite} -${DGrey} open ports and more.

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close

          ${BCyan}┌──${BBlue}[${BCyan} Anlominus 👽${BRed} ${HacKingPro} ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
          ${BCyan}└──╼ ${BGreen}")
                read -p "$HacKingProMenuMain" cmd
                case $cmd in
                  x|X|exit|quit|Exit )
                  clear
                  HacKingPro=$(echo "${BRed}Hac${BYellow}King${BBlue}Pro")
                  echo "\n\t\t ${BRed}[🙏🏼${BRed}] ${BWhite}Exit ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}"
                  break
                  ;;
                  0|00 )
                  read -p "$Press_Enter_To_START"
                  cd Bolt
                  python3 bolt.py -u https://github.com -l 2 -t 10
                  if [ $? == 1 ]; then
                    #statements
                    pip3 install -r requirements.txt
                    python3 bolt.py
                    # python3 bolt.py -u https://github.com -l 2 -t 10
                  fi
                  clear
                  read -p "$Press_ENTER"
                  ;;
                  6|06 )
                  read -p "$Press_Enter_To_START"
                  cd Sublist3r
                  python sublist3r.py -d www.$targetIP.com
                  if [ $? == 1 ]; then
                    #statements
                    pip install -r requirements.txt
                    pip install requests
                    pip install dnspython
                    pip install argparse
                  fi
                  read -p "$Press_ENTER"
                  ;;
                esac
              done
            ;;
            cmi|CMI )
            while true; do
              #statements
              cd $xMenu01_CMI
              clear
              HacKingProLogo1
              HacKingProMenuMain=$(echo "${BRed}
          ${BBlue}[${BYellow}CMI${BBlue}] ${BYellow} 📜 Collecting Machine Information Menu

          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}=======================================================================================

                  ${BWhite} -${DGrey} User Enumeration,
                  ${BWhite} -${DGrey} System Groups,
                  ${BWhite} -${DGrey} OS Hostnames,
                  ${BWhite} -${DGrey} OS System Type,
                  ${BWhite} -${DGrey} System Banners,

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close

          ${BCyan}┌──${BBlue}[${BCyan} Anlominus 👽${BRed} ${HacKingPro} ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
          ${BCyan}└──╼ ${BGreen}")
                read -p "$HacKingProMenuMain" cmd
                case $cmd in
                  x|X|exit|quit|Exit )
                  clear
                  HacKingPro=$(echo "${BRed}Hac${BYellow}King${BBlue}Pro")
                  echo "\n\t\t ${BRed}[🙏🏼${BRed}] ${BWhite}Exit ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}"
                  break
                  ;;
                esac
              done
            ;;
            csi|CSI )
            while true; do
              #statements
              cd $xMenu01_CSI
              clear
              HacKingProLogo1
              HacKingProMenuMain=$(echo "${BRed}
          ${BBlue}[${BYellow}CSI${BBlue}] ${BYellow} 📜 Collecting Social Information Menu

          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}=======================================================================================

          ${BRed}[${DGrey}01${BRed}]${BBlue} - ${DGrey} E4GL30S1NT

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close

          ${BCyan}┌──${BBlue}[${BCyan} Anlominus 👽${BRed} ${HacKingPro} ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
          ${BCyan}└──╼ ${BGreen}")
                read -p "$HacKingProMenuMain" cmd
                case $cmd in
                  x|X|exit|quit|Exit )
                  clear
                  HacKingPro=$(echo "${BRed}Hac${BYellow}King${BBlue}Pro")
                  echo "\n\t\t ${BRed}[🙏🏼${BRed}] ${BWhite}Exit ${HacKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}"
                  break
                  ;;
                  1|01 )
                  read -p "$Press_Enter_To_START" readstart
                  cd E4GL30S1NT
                  python3 E4GL30S1NT.py
                  if [ $? == 1 ]; then
                    #statements
                    bash linuxinstall.sh

                  fi
                  ;;
                esac
              done
            ;;
          esac
        done
      ;;
      02|2 )
      if [ -z $targetIP ]; then
        #statements
        cd "$xMenu02"
        clear
        HacKingProLogo1
        echo "
          ${BBlue}[${BRed}ERROR${BBlue}] ${BYellow} ❌ ${BRed}Error; ${LRed}You need Enter IP Before Scanning;

          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${DGrey} ⚡️ Planning and Scoping 🎯
          ${BRed}=======================================================================================
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BRed}#${BBlue}] 🎯 ${LRed}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BRed}#${BBlue}] 🗓  ${LRed}Current Date${BBlue}: ${BRed} $(date)
          ${BRed}======================================================================================="

          echo "\n          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${BGreen} [p|P] ${DGrey} On Keyboard and Come Back!!! `date`"
          sleep 1
          echo "\n          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${BGreen} [p|P] ${DGrey} On Keyboard and Come Back!!! `date`"
          sleep 1
          echo "\n          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${BGreen} [p|P] ${DGrey} On Keyboard and Come Back!!! `date`"
          sleep 1
          echo "\n          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${BGreen} [p|P] ${DGrey} On Keyboard and Come Back!!! `date`"
          sleep 1
          echo "\n          ${BRed}[${DGrey}P${BRed}]${BBlue} - ${BGreen} [p|P] ${DGrey} On Keyboard and Come Back!!! `date`"
          sleep 1

        MainMenu
      fi
      clear
      HacKingProLogo1
      cd $XHacKingPro
      #
      if [ -d Case ]; then
        #statements
        echo "\n\t\t${BRed}[${BYellow}Found!${BRed}]${BBlue} - ${BYellow}Case Folder Exists, Continue to it\n"
        cd Case
        echo "\n\t\t${BRed}[${BYellow}Create!${BRed}]${BBlue} - ${BYellow}Creating $targetNAME and Continue to it\n"
        mkdir $targetNAME
        cd $targetNAME
        echo "\n\t\t${BRed}[${BYellow}Create!${BRed}]${BBlue} - ${BYellow}Creating Reconnaissance and Continue to it\n"
        mkdir Reconnaissance
        cd Reconnaissance
      else
        echo "\n\t\t${BRed}[${BYellow}Create!${BRed}]${BBlue} - ${BYellow}Creating Case Folder and Continue to it\n"
        mkdir Case
        cd Case
        echo "\n\t\t${BRed}[${BYellow}Create!${BRed}]${BBlue} - ${BYellow}Creating $targetNAME and Continue to it\n"
        mkdir $targetNAME
        cd $targetNAME
        echo "\n\t\t${BRed}[${BYellow}Create!${BRed}]${BBlue} - ${BYellow}Creating Reconnaissance and Continue to it\n"
        mkdir Reconnaissance
        cd Reconnaissance
      fi
      echo "\n\t\t${BRed}[${LGrey}02${BRed}]${BBlue} - ${DGrey}Vulnerability Assessment"
      #  [2] - Reconnaissance & Vulnerability Assessment
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo "# [2] - Reconnaissance & Vulnerability Assessment " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      xMenu02_arp=$(arp -an)
      xMenu02_arp_x=$(
      echo "\n\t\t${BGreen}### Arp Scan Log"
      echo "# Arp Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " $xMenu02_arp " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.)
      echo "$xMenu02_arp_x"


      #
      echo "\n\t\t${BGreen}### TraceRoute Scan Log"
      echo "# TraceRoute Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " `traceroute $targetIP` " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      echo "\n\t\t${BGreen}### Ping Scan Log"
      echo "# Ping Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " `ping $targetIP -c4` " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      echo "\n\t\t${BGreen}### Dig Scan Log"
      echo "# Dig Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " `dig $targetIP all` " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      echo "\n\t\t${BGreen}### Nslookup Scan Log"
      echo "# Nslookup Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " `nslookup $targetIP` " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      echo "\n\t\t${BGreen}### WhoIs Scan Log"
      echo "# WhoIs Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " `whois $targetIP` " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      # echo "\n\t\t${BGreen}### Dirb Scan Log "
      # echo "# Dirb Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      # echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      # echo " `dirb http://$targetIP` " >> ${targetNAME}-HacKingPro-Recon-Log.md
      # echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      # echo "\n\t\t${BGreen}### Nmap Scan Log "
      # echo "# Nmap Scan Log $targetIP: " >> ${targetNAME}-HacKingPro-Recon-Log.md
      # echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      # echo " `nmap -sV -sC -O $targetIP ` " >> ${targetNAME}-HacKingPro-Recon-Log.md
      # echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      #
      echo "---" >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      echo " " >> ${targetNAME}-HacKingPro-Recon-Log.md
      ;;
      03|3 )
      echo "\n\t\t${BRed}[${LGrey}03${BRed}]${BBlue} - ${DGrey}Web Application HacKing"
      ;;
      04|4 )
      echo "\n\t\t${BRed}[${LGrey}04${BRed}]${BBlue} - ${DGrey}Database Assessment"
      ;;
      05|5 )
      echo "\n\t\t${BRed}[${LGrey}05${BRed}]${BBlue} - ${DGrey}Password HacKing"
      ;;
      i|I )
      echo "\n\t\t ${BRed}[${LGrey}I${BRed}]${BBlue} - ${BYellow}Installing HacKingPro On the System \n"
      sleep 1
      echo "\n\t\t ${BRed}[${LGrey}I${BRed}]${BBlue} - ${LYellow}Cloning Into [~/HacKingPro] \n"
      sleep 1
      git clone https://github.com/Anlominus/HacKingPro.git ~/HacKingPro
      echo "\n\t\t ${BRed}[${LGrey}I${BRed}]${BBlue} - ${LYellow}Copying Into [~${bin}/HacKingPro] \n"
      sleep 1
      sudo cp -vR ~/HacKingPro $bin/HacKingPro
      echo "\n\t\t ${BRed}[${LGrey}I${BRed}]${BBlue} - ${LYellow}Giving all Permission To [~${bin}/HacKingPro] \n"
      sleep 1
      sudo chmod 777 -R $bin/HacKingPro
      echo "\n\t\t ${BRed}[${LGrey}I${BRed}]${BBlue} - ${LGreen}Successfully Installed \n"
      echo "\n\t\t ${BRed}[${LGrey}I${BRed}]${BBlue} - ${LGreen}Installed Direction: $XHacKingPro \n"
      sleep 1
      echo "\n\t\t ${BRed}[${LGrey}I${BRed}]${BBlue} - ${BGreen}Open New Terminal And type [:~> HacKingPro ]  \n"
      sleep 3
      echo "$XHacKingPro"
      read -p "$Press_ENTER" finished
      clear
      break
      ;;
      cs|CS )
      Arsenal
      ;;
      koth|Koth|KoTH|KOTH )
      # cd "$xMenuKoTH"
      # sh KoTH
      clear

      koth_banner(){
        #statements
        echo "
      $LYellow \t\t █████   ████${BYellow}          ███████████${DGrey} █████   █████
      $LYellow \t\t░░███   ███░ ${BYellow}         ░█░░░███░░░█${DGrey}░░███   ░░███
      $LYellow \t\t ░███  ███   ${BYellow}  ██████ ░   ░███  ░ ${DGrey} ░███    ░███
      $LYellow \t\t ░███████    ${BYellow} ███░░███    ░███    ${DGrey} ░███████████
      $LYellow \t\t ░███░░███   ${BYellow}░███ ░███    ░███    ${DGrey} ░███░░░░░███
      $LYellow \t\t ░███ ░░███  ${BYellow}░███ ░███    ░███    ${DGrey} ░███    ░███
      $LYellow \t\t █████ ░░████${BYellow}░░██████     █████   ${DGrey} █████   █████
      $LYellow \t\t░░░░░   ░░░░ ${BYellow} ░░░░░░     ░░░░░    ${DGrey}░░░░░   ░░░░░
                                                            "
      }
      koth_banner

      installingONSystem(){
      cp KoTH  /usr/local/bin/KoTH
      }

      AnonMainMenu(){
        while true; do
        #statements
        clear
        koth_banner
        KoTHMenuMain=$(echo "${BRed}
                ${BBlue}[${BRed}#${BBlue}] 📜 ${BYellow} Anonimity Surfing Menu

                ${BRed}[${LGrey}1${BRed}]${BBlue} -${DGrey} Anonimity Surfing status
                ${BRed}[${LGrey}2${BRed}]${BBlue} -${DGrey} Anonimity Surfing start
                ${BRed}[${LGrey}3${BRed}]${BBlue} -${DGrey} Anonimity Surfing stop

                ${BBlue}[${BRed}#${BBlue}] 📜 ${BYellow} Network Manager Menu

                ${BRed}[${LGrey}4${BRed}]${BBlue} -${DGrey} ifconfig -a
                ${BRed}[${LGrey}5${BRed}]${BBlue} -${DGrey} ip a

                ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close


      ${BCyan}            ┌──${BBlue}[${BBlue} Anlominus 👽${BRed} KoTH ${BCyan}$~${BBlue}]
      ${BCyan}            └──╼ ")
          read -p "$KoTHMenuMain" cmd
          case $cmd in
            1 )
            echo "${BRed}\n\t\t[${LGrey}1${BRed}]${BBlue} -${DGrey} Anonimity Surfing status"
            anonsurf status
            sleep 1
            ;;
            2 )
            echo "${BRed}\n\t\t[${LGrey}2${BRed}]${BBlue} -${DGrey} Anonimity Surfing start"
            anonsurf start
            sleep 1
            ;;
            3 )
            echo "${BRed}\n\t\t[${LGrey}3${BRed}]${BBlue} -${DGrey} Anonimity Surfing stop"
            anonsurf stop
            sleep 1
            ;;
            x )
            clear
            break
            ;;
          esac
        done
      }

      privilegeEscalation(){
        while true; do
        #statements
        clear
        koth_banner
        KoTHMenuMain=$(echo "${BRed}
                ${BBlue}[${BRed}#${BBlue}] 📜 ${BYellow} Privilege-Escalation

                ${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} Linux-PrivEsc
                ${BRed}[${LGrey}WPE${BRed}]${BBlue} -${DGrey} Windows-PrivEsc

                ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close


      ${BCyan}            ┌──${BBlue}[${BBlue} Anlominus 👽${BRed} KoTH ${BCyan}$~${BBlue}]
      ${BCyan}            └──╼ ")
          read -p "$KoTHMenuMain" cmd
          case $cmd in
            lpe|LPE )
            cd $xMenu14
            cd Linux/Enumeration
            sleep 1
            if [ -e linpeas_base.sh ]; then
              #statements
              echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ Found ${BGreen}linpeas_base.sh\n${BBlue}"
            else
              echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} 🔶 Downloading ${BGreen}linpeas_base.sh\n${BBlue}"
              wget https://raw.githubusercontent.com/Anlominus/HacKingPro/main/Menu/14--Privilege%20Enumeration%20%26%20Escalation/Linux/Enumeration/linpeas_base.sh
            fi
            if [ -e linuxallenum.sh ]; then
              #statements
              echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ Found ${BGreen}linuxallenum.sh\n${BBlue}"
            else
              echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} 🔶 Downloading ${BGreen}linuxallenum.sh\n${BBlue}"
              wget https://raw.githubusercontent.com/Anlominus/HacKingPro/main/Menu/14--Privilege%20Enumeration%20%26%20Escalation/Linux/Enumeration/linuxallenum.sh
            fi
            if [ -e lse.sh ]; then
              #statements
              echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ Found ${BGreen}lse.sh\n${BBlue}"
            else
              echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} 🔶 Downloading ${BGreen}lse.sh\n${BBlue}"
              wget https://raw.githubusercontent.com/Anlominus/HacKingPro/main/Menu/14--Privilege%20Enumeration%20%26%20Escalation/Linux/Enumeration/lse.sh
            fi
            sleep 1
            echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ ${BGreen}All Downloaded Linux-PrivEsc GiTools\n"
            echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ ${BGreen}Current Directory: \n$(pwd)\n"
            sleep 1
            ls -l1
            echo " "
            read -p " Press Enter" some
            ;;
            wpe|WPE )
            echo "${BRed}[${LGrey}WPE${BRed}]${BBlue} -${DGrey} Windows-PrivEsc"
            read_ifconfig="$(ifconfig)"
            echo "$read_ifconfig"
            sleep 3
            echo " "
            # sleep 1
            # git clone https://github.com/Anlominus/Windows-PrivEsc
            # sleep 1
            ;;
            x )
            clear
            break
            ;;
          esac
        done
      }

      MainMenu(){
        while true; do
        #statements
        # cd "$xMenuKoTH"
        tryhackmeVpnIP=$(ifconfig tun0 | grep inet)
        clear
        koth_banner
        HacKingProTargetStatus=$(echo "\n
          ${BRed}[${DGrey}P${BRed}]${BBlue} -${DGrey} ⚡️ Planning and Scoping 🎯
          ${BYellow}=======================================================================================
          ${BBlue}[${BYellow}#${BBlue}] 🎯 ${BYellow}VPN IP${BBlue}: ${BRed}${tryhackmeVpnIP}
          ${BBlue}[${BYellow}#${BBlue}] 🎯 ${BYellow}Target IP${BBlue}: ${BRed}${targetIP}
          ${BBlue}[${BYellow}#${BBlue}] 🎯 ${BYellow}Target Name${BBlue}: ${BRed}${targetNAME}
          ${BBlue}[${BYellow}#${BBlue}] 🎯 ${BYellow}Target Email${BBlue}: ${BRed}${targetEmail}
          ${BBlue}[${BYellow}#${BBlue}] 🎯 ${BYellow}Target Phone${BBlue}: ${BRed}${targetPhone}
          ${BBlue}[${BYellow}#${BBlue}] 🎯 ${BYellow}Target Log Name${BBlue}: ${BRed}${targetLogNAME}
          ${BBlue}[${BYellow}#${BBlue}] 🎯 ${BYellow}TryHackMe UserName${BBlue}: ${BRed}${username}
          ${BBlue}[${BYellow}#${BBlue}] 🗓  ${BYellow}Current Date${BBlue}: ${BRed} $(date)
          ${BYellow}=======================================================================================
          ${BRed}[${DGrey}I${BRed}]${BBlue} - ${DGrey}Install HacKingPro On the System")

        KoTHMenuMain=$(echo "${BRed}
          ${BBlue}[${BYellow}#${BBlue}] ${BYellow} 📜 Main Menu ⌖"

          echo "$HacKingProTargetStatus""

          ${BRed}[${LGrey}a${BRed}]${BBlue} -${DGrey} Anonymity Surfing
          ${BRed}[${LGrey}1${BRed}]${BBlue} -${DGrey} Planning and Scoping
          ${BRed}[${LGrey}2${BRed}]${BBlue} -${DGrey} Reconnaissance & Vulnerability Assessment
          ${BRed}[${LGrey}3${BRed}]${BBlue} -${DGrey} Gaining Access & Maintaining Access
          ${BRed}[${LGrey}4${BRed}]${BBlue} -${DGrey} Covering tracks
          ${BRed}[${LGrey}5${BRed}]${BBlue} -${DGrey} Analysis & Reporting

          ${BRed}[${BBlue}i${BRed}]${BBlue} -${BBlue} Installing KoTH on The System

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close


                ${BCyan}  ┌──${BBlue}[${BCyan} Anlominus 👽${BYellow} KoTH ${BCyan} ~$(pwd) ${BCyan}$~${BBlue}]
                ${BCyan}  └──╼ ${BGreen}")
          read -p "$KoTHMenuMain" cmd
          case $cmd in
            i )
            installingONSystem
            ;;
            a )
            AnonMainMenu
            ;;
            1 )
            echo "\n\t\t${BRed}[${BBlue}1${BRed}]${BWhite} - ${BRed}Planning and Scoping"
            #
            t1="$(echo "\n\t\t${BBlue}[${BYellow}?${BBlue}]${BGreen} - IP / Host of Target / Client: ${BRed}")"
            read -p "$t1" targetIP
            if [ -z $targetIP ]; then
              #statements
              targetIP="127.0.0.1"
            fi
            #
            t2="$(echo "\n\t\t${BBlue}[${BYellow}?${BBlue}]${BGreen} - Name of Target / Client: ${BRed}")"
            read -p "$t2" targetLogNAME
            if [ -z $targetLogNAME ]; then
              #statements
              targetLogNAME="ChangeMe_SetTarget"
              echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Name of Target / Client: ${BRed} $targetLogNAME"
            fi
            #
            file="${targetLogNAME}-KoTH-Log.md"
            if [ -e ${file} ]; then
              t2="$(echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BRed} - File Exist! Remove it? [yY/nN]: ")"
              read -p "$t2 " filexist
              case $filexist in
                y|Y)
                echo "  ${BBlue}[${BRed}!${BBlue}] Removing {${targetLogNAME}-KoTH-Log.md} file .."
                rm ${targetLogNAME}-KoTH-Log.md
                clear
                ;;
                n|N)
                echo "  ${BBlue}[${BRed}!${BBlue}] Leaving {${targetLogNAME}-KoTH-Log.md} file and Add to it .."
                ;;
              esac
            fi
            # Page Header
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo "---" >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo "# Anlominus KoTH Report for $targetLogNAME " >> ${targetLogNAME}-KoTH-Log.md
            echo "#### Date: `date`" >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo "---" >> ${targetLogNAME}-KoTH-Log.md
            #  [1] - Planning and Scoping
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo "# [1] - Planning and Scoping " >> ${targetLogNAME}-KoTH-Log.md
            echo "#### Date: `date`" >> ${targetLogNAME}-KoTH-Log.md
            echo "### Planning Log for $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo "
            - 📜 VPN IP: ${tryhackmeVpnIP}
            - 📜 KoTH Target IP: ${targetIP}
            - 📜 Target Log Name: ${targetLogNAME}
            - 📜 TryHackMe UserName: ${username}
            " >> ${targetLogNAME}-KoTH-Log.md

            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo "---" >> ${targetLogNAME}-KoTH-Log.md

            # Define variable for THM username
            read_username=$(echo "\n\t\t${BBlue}[${BRed}?${BBlue}]${BGreen} - What Your User Name on TryHackMe: ${BRed} ")
            read -p "$read_username" Alm
            if [ -z $Alm ]; then
              #statements
              Alm="Anlominus"
            fi
            username="$Alm"

            # Define directory were $username.ovpn is located
            vpn_dir="$HOME/.thm/.vpn"
            if [ -d /$HOME/.thm/.vpn ]; then
              #statements
              echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Found!  TryHackme VPN Path Location exists ! ~>: $DGrey  $vpn_dir  \n"
              ls -lahs $vpn_dir
            else
              echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Creating .vpn Folder In $vpn_dir Directory\n ${BRed} "
              mkdir $HOME/.thm/
              mkdir $HOME/.thm/.vpn
              ls -lahs $vpn_dir
            fi

            # Define variable for our search string (find this running process)
            vpn_file="$vpn_dir/$username.ovpn"
            if [ -e $vpn_file ]; then
              #statements
              echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Found TryHackme VPN File ~>: $DGrey  $vpn_file  \n"
            else
              cant_found=$(echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BRed} - Sorry Can't Found TryHackme VPN File !! \n\n\t\t  Enter $username.ovpn Location ~>: ")
              read -p "$cant_found"  this_location
              if [ -e $this_location ]; then
                #statements
                echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Found TryHackme VPN File ~>: $DGrey  $this_location $BRed Copying To $vpn_dir/\n"
                cp $this_location $vpn_file
                ls -lahs $vpn_dir
              else
                echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BRed} - Sorry Can't Found TryHackme VPN File !! Maybe you dont have it?"
              fi
            fi
            # Regex pattern to validate IP format (#.#.#.#)
            valid_ip="([0-9]{1,3}\.){3}"
            valid_thm=".*\.thm$"

            # Session logfile
            session_log=$vpn_dir/.logs/KoTH-$(date).log
            echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Session logfile ~>: $DGrey $session_log\n"
            ls -lahs $session_log

            # Location of profile to update (.zshrc, .bashrc, .bash_profile, etc)
            profile_file=~/.zshrc

            # Save the incoming args to vars with better names (./thm-vm $1 $2 $3)
            arg1=$1
            arg2=$2
            arg3=$3

            # Error helper function, prefix with red color and exit 1 (non zero is error)
            # https://emojipedia.org/search/?q=warning
            # 🚫 🚭 🚨
            error() {
              echo "      ${cyan}  |---------------------------------"
              prefix="\n\t\t [ERROR] \t"
              echo "${BRed}${prefix}${1}${nocolor}\n"
              echo "      ${cyan}  |---------------------------------"
            }

            # Warning helper function, show warning prefix with yellow color
            warn() {
              echo "      ${cyan}  |---------------------------------"
              prefix="\n\t\t [WARN] \t"
              echo "${BYellow}${prefix}${1}${nocolor}\n"
              echo "      ${cyan}  |---------------------------------"
            }

            # log log with cyan color & prefix
            log() {
              echo "      ${cyan}  |---------------------------------"
              prefix="\n\t\t [INFO] \t"
              echo "${BCyan}${prefix}${1}${nocolor}\n"
              echo "      ${cyan}  |---------------------------------"
            }

            # Function to read user input, and return boolean whether they confirm "[Y/n]"
            # NOTE: Capital "Y" typically denotes default, so no resp (just enter key) will be "yes" (true)
            confirmYes() {
              echo ""
              msg="${1:-Are you sure?}"
              read -r -p "${msg} [Y/n] " response
              case "$response" in
                [nN][oO]|[nN])
                  return 1
                  ;;
                *)
                  return 0
                  ;;
              esac
            }

            connectVpn() {
              if [ "$vpn_running" != "0" ]; then
                warn "🤨 THM VPN is not running!"
                warn "Searching for process: '$vpn_file' (using ps aux | grep ...)"
                if confirmYes "Connect to VPN now? (requires sudo)"; then
                  # sudo echo "init" > $session_log
                  sudo openvpn $vpn_file > $session_log
                  log "Done! 😁"
                fi
              else
                log "Found tun0 & Connection Confirmed 👍"
              fi
              log "THM VPN Connection Confirmed 👍"
              echo "\n\n\t\t  $cyan $(ifconfig tun0) \n"
              echo "\n\n\t\t  $cyan $(ps aux | grep $vpn_file) \n"
            }

            hostsModify="$(echo "\n\t\t${BBlue}[${BYellow}?${BBlue}] 🔶 ${BGreen}Adding ${BYellow}$targetIP ${targetLogNAME} ${BGreen}to /etc/hosts? [y|Y] or [press ENTER]   ")"
            read -p "$hostsModify" hostsMod
            case $hostsMod in
              y|Y|yes|YES )
              echo "      ${BBlue}[${BRed}#${BBlue}] 🔶 ${BGreen}Adding $targetIP ${targetLogNAME} to /etc/hosts ${BRed}${tryhackmeVpnIP}"
              echo "$targetIP    ${targetLogNAME}.thm" | sudo tee -a /etc/hosts
                ;;
              n|N|no|NO )
              break
              ;;
            esac

            # Check if openvpn connection is running
            ifconfig tun0
            vpn_running=$?

            ;;
            2 )
            clear
            echo "\n\t\t${BRed}[${BBlue}2${BRed}]${BWhite} -${BRed} Reconnaissance & Vulnerability Assessment"

            #  [2] - Reconnaissance & Vulnerability Assessment
            echo "#### Date: `date`" >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo "# [2] - Reconnaissance & Vulnerability Assessment " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "\n\t\t${BGreen}### Arp Scan Log `date`"
            echo "### Arp Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " `arp -an` " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "\n\t\t${BGreen}### TraceRoute Scan Log `date`"
            echo "### TraceRoute Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " `traceroute $targetIP` " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "\n\t\t${BGreen}### Ping Scan Log `date`"
            echo "### Ping Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " `ping $targetIP -c4` " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "\n\t\t${BGreen}### Dig Scan Log `date`"
            echo "### Dig Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " `dig $targetIP all` " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "\n\t\t${BGreen}### Nslookup Scan Log `date`"
            echo "### Nslookup Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " `nslookup $targetIP` " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "\n\t\t${BGreen}### WhoIs Scan Log `date`"
            echo "### WhoIs Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " `whois $targetIP` " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "\n\t\t${BGreen}### Nmap Scan Log `date`"
            echo "### Nmap Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " `nmap -sV -sC -O $targetIP ` " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            #
            echo "---" >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            echo " " >> ${targetLogNAME}-KoTH-Log.md
            ;;
            3 )
            echo "\n\t\t${BRed}[${BBlue}3${BRed}]${BWhite} -${BRed} Gaining Access & Maintaining Access"
            privilegeEscalation
            ;;
            4 )
            echo "\n\t\t${BRed}[${BBlue}4${BRed}]${BWhite} -${BRed} Covering tracks"
            ;;
            5 )
            echo "\n\t\t${BRed}[${BBlue}5${BRed}]${BWhite} -${BRed} Analysis & Reporting"
            ;;
            x )
            clear
            break
            ;;
          esac
        done
      }
      MainMenu
      ;;
      x|X|exit|quit|Exit )
      clear
      echo "$HacKingProExit"
      exit
      ;;
    esac
  done
}
MainMenu
