#!/bin/sh
#!/bin/bash
#!/usr/bin/bash
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/bash
###############################################
# Name : Anlominus ~ KoTH
# Last UPDATE : 2022 Jun 21
# Create Date : 2022 Jun 10
# Description: TryHackMe - Simple helper script for VPN, VM's, etc
# Skils: Best Copywriter IN the COSMOS!
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE GREAT SCRIPTS
# CREDIT: To All World Creators free Scripts & Tools
# Location: Made With LOVE IN ISRAEL !
# Source: [ https://github.com/Anlominus/TryHackMe/tree/main/King%20of%20the%20Hill/KoTH ]
# Aouther: f11snipe +~> Anlominus ~> RhytMix ~> KoTH
# TryHackMe ~> King of The Hill: https://tryhackme.com/games/koth
###############################################
clear

KoTHColors(){
##############################################################################
# COLORS AND BACKGROUNDS
##############################################################################
Color_Off='\033[0m' # Text Reset

# Regular Colors
Black='\033[0;30m'  # Black
Red='\033[0;31m'    # Red
Green='\033[0;32m'  # Green
Yellow='\033[0;33m' # Yellow
Blue='\033[0;34m'   # Blue
Purple='\033[0;35m' # Purple
Cyan='\033[0;36m'   # Cyan
White='\033[0;97m'  # White

# Additional colors
LGrey='\033[0;37m'   # Ligth Gray
DGrey='\033[0;90m'   # Dark Gray
LRed='\033[0;91m'    # Ligth Red
LGreen='\033[0;92m'  # Ligth Green
LYellow='\033[0;93m' # Ligth Yellow
LBlue='\033[0;94m'   # Ligth Blue
LPurple='\033[0;95m' # Light Purple
LCyan='\033[0;96m'   # Ligth Cyan


# Bold
BBlack='\033[1;30m'  # Black
BRed='\033[1;31m'    # Red
BGreen='\033[1;32m'  # Green
BYellow='\033[1;33m' # Yellow
BBlue='\033[1;34m'   # Blue
BPurple='\033[1;35m' # Purple
BCyan='\033[1;36m'   # Cyan
BWhite='\033[1;37m'  # White

# Underline
UBlack='\033[4;30m'  # Black
URed='\033[4;31m'    # Red
UGreen='\033[4;32m'  # Green
UYellow='\033[4;33m' # Yellow
UBlue='\033[4;34m'   # Blue
UPurple='\033[4;35m' # Purple
UCyan='\033[4;36m'   # Cyan
UWhite='\033[4;37m'  # White

# Background
On_Black='\033[40m'  # Black
On_Red='\033[41m'    # Red
On_Green='\033[42m'  # Green
On_Yellow='\033[43m' # Yellow
On_Blue='\033[44m'   # Blue
On_Purple='\033[45m' # Purple
On_Cyan='\033[46m'   # Cyan
On_White='\033[47m'  # White
}
KoTHColors

koth_banner(){
  #statements
  echo "
$LYellow \t\t █████   ████${BYellow}          ███████████${DGrey} █████   █████
$LYellow \t\t░░███   ███░ ${BYellow}         ░█░░░███░░░█${DGrey}░░███   ░░███
$LYellow \t\t ░███  ███   ${BYellow}  ██████ ░   ░███  ░ ${DGrey} ░███    ░███
$LYellow \t\t ░███████    ${BYellow} ███░░███    ░███    ${DGrey} ░███████████
$LYellow \t\t ░███░░███   ${BYellow}░███ ░███    ░███    ${DGrey} ░███░░░░░███
$LYellow \t\t ░███ ░░███  ${BYellow}░███ ░███    ░███    ${DGrey} ░███    ░███
$LYellow \t\t █████ ░░████${BYellow}░░██████     █████   ${DGrey} █████   █████
$LYellow \t\t░░░░░   ░░░░ ${BYellow} ░░░░░░     ░░░░░    ${DGrey}░░░░░   ░░░░░
                                                      "
}
koth_banner

installingONSystem(){
cp KoTH  /usr/local/bin/KoTH
}

AnonMainMenu(){
  while true; do
  #statements
  clear
  koth_banner
  KoTHMenuMain=$(echo "${BRed}
          ${BBlue}[${BRed}#${BBlue}] 📜 ${BYellow} Anonimity Surfing Menu

          ${BRed}[${LGrey}1${BRed}]${BBlue} -${DGrey} Anonimity Surfing status
          ${BRed}[${LGrey}2${BRed}]${BBlue} -${DGrey} Anonimity Surfing start
          ${BRed}[${LGrey}3${BRed}]${BBlue} -${DGrey} Anonimity Surfing stop

          ${BBlue}[${BRed}#${BBlue}] 📜 ${BYellow} Network Manager Menu

          ${BRed}[${LGrey}4${BRed}]${BBlue} -${DGrey} ifconfig -a
          ${BRed}[${LGrey}5${BRed}]${BBlue} -${DGrey} ip a

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close


${BCyan}            ┌──${BBlue}[${BBlue} Anlominus 👽${BRed} KoTH ${BCyan}$~${BBlue}]
${BCyan}            └──╼ ")
    read -p "$KoTHMenuMain" cmd
    case $cmd in
      1 )
      echo "${BRed}\n\t\t[${LGrey}1${BRed}]${BBlue} -${DGrey} Anonimity Surfing status"
      anonsurf status
      sleep 1
      ;;
      2 )
      echo "${BRed}\n\t\t[${LGrey}2${BRed}]${BBlue} -${DGrey} Anonimity Surfing start"
      anonsurf start
      sleep 1
      ;;
      3 )
      echo "${BRed}\n\t\t[${LGrey}3${BRed}]${BBlue} -${DGrey} Anonimity Surfing stop"
      anonsurf stop
      sleep 1
      ;;
      x )
      clear
      break
      ;;
    esac
  done
}

privilegeEscalation(){
  while true; do
  #statements
  clear
  koth_banner
  KoTHMenuMain=$(echo "${BRed}
          ${BBlue}[${BRed}#${BBlue}] 📜 ${BYellow} Privilege-Escalation

          ${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} Linux-PrivEsc
          ${BRed}[${LGrey}WPE${BRed}]${BBlue} -${DGrey} Windows-PrivEsc

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close


${BCyan}            ┌──${BBlue}[${BBlue} Anlominus 👽${BRed} KoTH ${BCyan}$~${BBlue}]
${BCyan}            └──╼ ")
    read -p "$KoTHMenuMain" cmd
    case $cmd in
      lpe|LPE )
      mkdir Privilege-Escalation
      cd Privilege-Escalation
      mkdir LPE
      cd LPE
      sleep 1
      if [ -e linpeas_base.sh ]; then
        #statements
        echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ Found ${BGreen}linpeas_base.sh\n${BBlue}"
      else
        echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} 🔶 Downloading ${BGreen}linpeas_base.sh\n${BBlue}"
        wget https://raw.githubusercontent.com/Anlominus/HacKingPro/main/Menu/14--Privilege%20Enumeration%20%26%20Escalation/Enumeration/linpeas_base.sh
      fi
      if [ -e linuxallenum.sh ]; then
        #statements
        echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ Found ${BGreen}linuxallenum.sh\n${BBlue}"
      else
        echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} 🔶 Downloading ${BGreen}linuxallenum.sh\n${BBlue}"
        wget https://raw.githubusercontent.com/Anlominus/HacKingPro/main/Menu/14--Privilege%20Enumeration%20%26%20Escalation/Enumeration/linuxallenum.sh
      fi
      sleep 1
      if [ -e lse.sh ]; then
        #statements
        echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ Found ${BGreen}lse.sh\n${BBlue}"
      else
        echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} 🔶 Downloading ${BGreen}lse.sh\n${BBlue}"
        wget https://raw.githubusercontent.com/Anlominus/HacKingPro/main/Menu/14--Privilege%20Enumeration%20%26%20Escalation/Enumeration/lse.sh
      fi
      sleep 1
      echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ ${BGreen}All Downloaded Linux-PrivEsc GiTools\n"
      echo "\n${BRed}[${LGrey}LPE${BRed}]${BBlue} -${DGrey} ✅ ${BGreen}Current Directory: \n$(pwd)\n"
      sleep 1
      ls -l1
      sleep 5
      echo " "
      read -p " Press Enter" some
      ;;
      wpe|WPE )
      echo "${BRed}[${LGrey}WPE${BRed}]${BBlue} -${DGrey} Windows-PrivEsc"
      read_ifconfig="$(ifconfig)"
      echo "$read_ifconfig"
      sleep 3
      echo " "
      # sleep 1
      # git clone https://github.com/Anlominus/Windows-PrivEsc
      # sleep 1
      ;;
      x )
      clear
      break
      ;;
    esac
  done
}
MainMenu(){
  while true; do
  #statements
  tryhackmeVpnIP=$(ifconfig tun0 | grep inet)
  clear
  koth_banner
  KoTHMenuMain=$(echo "${BRed}
          ${BBlue}[${BRed}#${BBlue}] 📜 Menu

          ${BBlue}[${BRed}#${BBlue}] 📜 VPN IP: ${BRed}${tryhackmeVpnIP}
          ${BBlue}[${BRed}#${BBlue}] 📜 KoTH Target IP: ${BRed}${targetIP}
          ${BBlue}[${BRed}#${BBlue}] 📜 Target Log Name: ${BRed}${targetLogNAME}
          ${BBlue}[${BRed}#${BBlue}] 📜 TryHackMe UserName: ${BRed}${username}

          ${BRed}[${LGrey}a${BRed}]${BBlue} -${DGrey} Anonymity Surfing
          ${BRed}[${LGrey}1${BRed}]${BBlue} -${DGrey} Planning and Scoping
          ${BRed}[${LGrey}2${BRed}]${BBlue} -${DGrey} Reconnaissance & Vulnerability Assessment
          ${BRed}[${LGrey}3${BRed}]${BBlue} -${DGrey} Gaining Access & Maintaining Access
          ${BRed}[${LGrey}4${BRed}]${BBlue} -${DGrey} Covering tracks
          ${BRed}[${LGrey}5${BRed}]${BBlue} -${DGrey} Analysis & Reporting

          ${BRed}[${BBlue}i${BRed}]${BBlue} -${BBlue} Installing KoTH on The System

          ${BRed}[${LGrey}x${BRed}]${BWhite} -${DGrey} Exit / Quit / Close


${BCyan}            ┌──${BBlue}[${BBlue} Anlominus 👽${BRed} KoTH ${BCyan}$~${BBlue}]
${BCyan}            └──╼ ")
    read -p "$KoTHMenuMain" cmd
    case $cmd in
      i )
      installingONSystem
      ;;
      a )
      AnonMainMenu
      ;;
      1 )
      echo "\n\t\t${BRed}[${BBlue}1${BRed}]${BWhite} - ${BRed}Planning and Scoping"
      #
      t1="$(echo "\n\t\t${BBlue}[${BYellow}?${BBlue}]${BGreen} - IP / Host of Target / Client: ${BRed}")"
      read -p "$t1" targetIP
      if [ -z $targetIP ]; then
        #statements
        targetIP="127.0.0.1"
      fi
      #
      t2="$(echo "\n\t\t${BBlue}[${BYellow}?${BBlue}]${BGreen} - Name of Target / Client: ${BRed}")"
      read -p "$t2" targetLogNAME
      if [ -z $targetLogNAME ]; then
        #statements
        targetLogNAME="ChangeMe_SetTarget"
        echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Name of Target / Client: ${BRed} $targetLogNAME"
      fi
      #
      file="${targetLogNAME}-KoTH-Log.md"
      if [ -e ${file} ]; then
        t2="$(echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BRed} - File Exist! Remove it? [yY/nN]: ")"
        read -p "$t2 " filexist
        case $filexist in
          y|Y)
          echo "  ${BBlue}[${BRed}!${BBlue}] Removing {${targetLogNAME}-KoTH-Log.md} file .."
          rm ${targetLogNAME}-KoTH-Log.md
          clear
          ;;
          n|N)
          echo "  ${BBlue}[${BRed}!${BBlue}] Leaving {${targetLogNAME}-KoTH-Log.md} file and Add to it .."
          ;;
        esac
      fi
      # Page Header
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo "---" >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo "# Anlominus KoTH Report for $targetLogNAME " >> ${targetLogNAME}-KoTH-Log.md
      echo "#### Date: `date`" >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo "---" >> ${targetLogNAME}-KoTH-Log.md
      #  [1] - Planning and Scoping
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo "# [1] - Planning and Scoping " >> ${targetLogNAME}-KoTH-Log.md
      echo "#### Date: `date`" >> ${targetLogNAME}-KoTH-Log.md
      echo "### Planning Log for $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo "
      - 📜 VPN IP: ${tryhackmeVpnIP}
      - 📜 KoTH Target IP: ${targetIP}
      - 📜 Target Log Name: ${targetLogNAME}
      - 📜 TryHackMe UserName: ${username}
      " >> ${targetLogNAME}-KoTH-Log.md

      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo "---" >> ${targetLogNAME}-KoTH-Log.md

      # Define variable for THM username
      read_username=$(echo "\n\t\t${BBlue}[${BRed}?${BBlue}]${BGreen} - What Your User Name on TryHackMe: ${BRed} ")
      read -p "$read_username" Alm
      if [ -z $Alm ]; then
        #statements
        Alm="Anlominus"
      fi
      username="$Alm"

      # Define directory were $username.ovpn is located
      vpn_dir="$HOME/.thm/.vpn"
      if [ -d /$HOME/.thm/.vpn ]; then
        #statements
        echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Found!  TryHackme VPN Path Location exists ! ~>: $DGrey  $vpn_dir  \n"
        ls -lahs $vpn_dir
      else
        echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Creating .vpn Folder In $vpn_dir Directory\n ${BRed} "
        mkdir $HOME/.thm/
        mkdir $HOME/.thm/.vpn
        ls -lahs $vpn_dir
      fi

      # Define variable for our search string (find this running process)
      vpn_file="$vpn_dir/$username.ovpn"
      if [ -e $vpn_file ]; then
        #statements
        echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Found TryHackme VPN File ~>: $DGrey  $vpn_file  \n"
      else
        cant_found=$(echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BRed} - Sorry Can't Found TryHackme VPN File !! \n\n\t\t  Enter $username.ovpn Location ~>: ")
        read -p "$cant_found"  this_location
        if [ -e $this_location ]; then
          #statements
          echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Found TryHackme VPN File ~>: $DGrey  $this_location $BRed Copying To $vpn_dir/\n"
          cp $this_location $vpn_file
          ls -lahs $vpn_dir
        else
          echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BRed} - Sorry Can't Found TryHackme VPN File !! Maybe you dont have it?"
        fi
      fi
      # Regex pattern to validate IP format (#.#.#.#)
      valid_ip="([0-9]{1,3}\.){3}"
      valid_thm=".*\.thm$"

      # Session logfile
      session_log=$vpn_dir/.logs/KoTH-$(date).log
      echo "\n\t\t${BBlue}[${BRed}!${BBlue}]${BGreen} - Session logfile ~>: $DGrey $session_log\n"
      ls -lahs $session_log

      # Location of profile to update (.zshrc, .bashrc, .bash_profile, etc)
      profile_file=~/.zshrc

      # Save the incoming args to vars with better names (./thm-vm $1 $2 $3)
      arg1=$1
      arg2=$2
      arg3=$3

      # Error helper function, prefix with red color and exit 1 (non zero is error)
      # https://emojipedia.org/search/?q=warning
      # 🚫 🚭 🚨
      error() {
        echo "      ${cyan}  |---------------------------------"
        prefix="\n\t\t [ERROR] \t"
        echo "${BRed}${prefix}${1}${nocolor}\n"
        echo "      ${cyan}  |---------------------------------"
      }

      # Warning helper function, show warning prefix with yellow color
      warn() {
        echo "      ${cyan}  |---------------------------------"
        prefix="\n\t\t [WARN] \t"
        echo "${BYellow}${prefix}${1}${nocolor}\n"
        echo "      ${cyan}  |---------------------------------"
      }

      # log log with cyan color & prefix
      log() {
        echo "      ${cyan}  |---------------------------------"
        prefix="\n\t\t [INFO] \t"
        echo "${BCyan}${prefix}${1}${nocolor}\n"
        echo "      ${cyan}  |---------------------------------"
      }

      # Function to read user input, and return boolean whether they confirm "[Y/n]"
      # NOTE: Capital "Y" typically denotes default, so no resp (just enter key) will be "yes" (true)
      confirmYes() {
        echo ""
        msg="${1:-Are you sure?}"
        read -r -p "${msg} [Y/n] " response
        case "$response" in
          [nN][oO]|[nN])
            return 1
            ;;
          *)
            return 0
            ;;
        esac
      }

      connectVpn() {
        if [ "$vpn_running" != "0" ]; then
          warn "🤨 THM VPN is not running!"
          warn "Searching for process: '$vpn_file' (using ps aux | grep ...)"
          if confirmYes "Connect to VPN now? (requires sudo)"; then
            # sudo echo "init" > $session_log
            sudo openvpn $vpn_file > $session_log
            log "Done! 😁"
          fi
        else
          log "Found tun0 & Connection Confirmed 👍"
        fi
        log "THM VPN Connection Confirmed 👍"
        echo "\n\n\t\t  $cyan $(ifconfig tun0) \n"
        echo "\n\n\t\t  $cyan $(ps aux | grep $vpn_file) \n"
      }

      hostsModify="$(echo "\n\t\t${BBlue}[${BYellow}?${BBlue}] 🔶 ${BGreen}Adding ${BYellow}$targetIP ${targetLogNAME} ${BGreen}to /etc/hosts? [y|Y] or [press ENTER]   ")"
      read -p "$hostsModify" hostsMod
      case $hostsMod in
        y|Y|yes|YES )
        echo "      ${BBlue}[${BRed}#${BBlue}] 🔶 ${BGreen}Adding $targetIP ${targetLogNAME} to /etc/hosts ${BRed}${tryhackmeVpnIP}"
        echo "$targetIP    ${targetLogNAME}.thm" | sudo tee -a /etc/hosts
          ;;
        n|N|no|NO )
        break
        ;;
      esac

      # Check if openvpn connection is running
      ifconfig tun0
      vpn_running=$?

      ;;
      2 )
      clear
      echo "\n\t\t${BRed}[${BBlue}2${BRed}]${BWhite} -${BRed} Reconnaissance & Vulnerability Assessment"

      #  [2] - Reconnaissance & Vulnerability Assessment
      echo "#### Date: `date`" >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo "# [2] - Reconnaissance & Vulnerability Assessment " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "\n\t\t${BGreen}### Arp Scan Log `date`"
      echo "### Arp Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " `arp -an` " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "\n\t\t${BGreen}### TraceRoute Scan Log `date`"
      echo "### TraceRoute Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " `traceroute $targetIP` " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "\n\t\t${BGreen}### Ping Scan Log `date`"
      echo "### Ping Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " `ping $targetIP -c4` " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "\n\t\t${BGreen}### Dig Scan Log `date`"
      echo "### Dig Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " `dig $targetIP all` " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "\n\t\t${BGreen}### Nslookup Scan Log `date`"
      echo "### Nslookup Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " `nslookup $targetIP` " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "\n\t\t${BGreen}### WhoIs Scan Log `date`"
      echo "### WhoIs Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " `whois $targetIP` " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      # echo "\n\t\t${BGreen}### Dirb Scan Log `date`"
      # echo "### Dirb Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      # echo " " >> ${targetLogNAME}-KoTH-Log.md
      # echo " `dirb http://$targetIP` " >> ${targetLogNAME}-KoTH-Log.md
      # echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "\n\t\t${BGreen}### Nmap Scan Log `date`"
      echo "### Nmap Scan Log $targetIP: " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " `nmap -sV -sC -O $targetIP ` " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      #
      echo "---" >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      echo " " >> ${targetLogNAME}-KoTH-Log.md
      ;;
      3 )
      echo "\n\t\t${BRed}[${BBlue}3${BRed}]${BWhite} -${BRed} Gaining Access & Maintaining Access"
      privilegeEscalation
      ;;
      4 )
      echo "\n\t\t${BRed}[${BBlue}4${BRed}]${BWhite} -${BRed} Covering tracks"
      ;;
      5 )
      echo "\n\t\t${BRed}[${BBlue}5${BRed}]${BWhite} -${BRed} Analysis & Reporting"
      ;;
      x )
      clear
      exit
      ;;
    esac
  done
}
MainMenu



# if [ "$arg1" == "kill" ]; then
#   if [ "$vpn_running" == "0" ]; then
#     log "Found running openvpn process(es):"
#     ps aux | grep "$vpn_file" | grep -v grep
#
#     if confirmYes "Kill all process(es)?"; then
#       sudo pkill -f "$vpn_file"
#       sudo pkill grep
#
#       if [ "$?" == "0" ]; then
#         log "They're ... all ... dead 🤥"
#         exit 0
#       else
#         error "EPIC FAIL"
#       fi
#     else
#       warn "Aborting 'kill' command"
#     fi
#   fi
# elif [ "$arg1" == "log" ]; then
#   cat $session_log
#   log "This sesion log file is located: $session_log"
# elif [ $arg1 -e $valid_ip ]; then
#   connectVpn
#   if confirmYes "Update profile with VMIP=$arg1  "; then
#     res=$(cat $profile_file | sed -e "s/VMIP=\(.*\)\( \#.*\)/VMIP=$arg1/g" | grep VMIP)
#     log "Editing $profile_file: $res"
#     sed -i'.bak' -e "s/VMIP=\(.*\)/VMIP=$arg1/g" $profile_file
#     log "Run: 'source $profile_file' (to reload this session, new terminals will have \$VMIP set automatically)"
#   else
#     warn "Aborting new vm session"
#   fi
#
#   if [ $arg2 =~ $valid_thm ]; then
#     warn "ADD AS HOST [/etc/hosts]: $arg1    $arg2"
#   fi
# else
#   connectVpn
# fi
