#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################################
# shellcheck shell=bash

# Reset text formatting and colors.
resetT="\033[m"
BRed='\033[1;31m'    # Red
BGreen='\033[1;32m'  # Green

export LANG=en_US.UTF-8
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/opt/local/bin:/opt/sw/bin:/sw/bin:"$HOME"/.local/bin:"$HOME"/bin:"$HOME"/local/bin

tabs -12

process="myip"
vno="0.6.3"

simple_IP () {
	if $offline ; then
		publicip=""
	else
		icount=0
		while true
		do
			[[ $icount -eq 3 ]] && break
			publicip=$(dig +short myip.opendns.com @resolver1.opendns.com 2>/dev/null)
			[[ $publicip ]] && break
			sleep 1
			((icount++))
		done
		if ! [[ $publicip ]] ; then
			publicip=$(curl -sL --connect-timeout 10 --max-time 3 ipinfo.io/ip 2>/dev/null)
		fi
		if ! [[ $publicip ]] ; then
			publicip=$(curl -sL --connect-timeout 10 --max-time 3 icanhazip.com 2>/dev/null)
		fi
	fi
}

_ip () {
	if ! $ipopt ; then
		simple_IP
	fi
	if [[ $publicip ]] ; then
		echo -e "Public IP:\t\t\t$publicip"
		publicname=$(dig +short -x "$publicip" 2>/dev/null | sed 's/\.$//')
		! [[ $publicname ]] && publicname="-"
		echo -e "Public Name:\t\t$publicname"
		whoisraw=$(whois "$publicip" 2>/dev/null)
		publicorg=$(echo "$whoisraw" | awk '/Information related to/,0' | grep "^descr:" | head -1 | awk -F":" '{print substr($0, index($0,$2))}' | xargs)
		if ! [[ $publicorg ]] ; then
			publicorg=$(echo "$whoisraw" | grep -e "^org-name:" -e "^OrgName:" | head -1 | awk -F":" '{print substr($0, index($0,$2))}' | xargs)
		fi
		if ! [[ $publicorg ]] ; then
			descr_raw=$(echo "$whoisraw" | grep "^descr" | head -2 | grep -v "#")
			if [[ $(echo "$descr_raw" | wc -l) -gt 1 ]] ; then
				descr_raw=$(echo "$descr_raw" | head -1)
			fi
			publicorg=$(echo "$descr_raw" | awk -F":" '{print substr($0, index($0,$2))}' | xargs)
		fi
		! [[ $publicorg ]] && publicorg="-"
		echo -e "Provider/Organization:\t\t$publicorg"
		if $rloc ; then
			IFS=$'\n' read -rd '' rcountry rlat rlong < <(curl -sL --connect-timeout 10 --max-time 10 "http://ip-api.com/line/$publicip?fields=193" 2>/dev/null)
			if ! [[ $rlat ]] || ! [[ $rlong ]] ; then
				if ! [[ $rcountry ]] ; then
					rcoord="-"
				else
					rcoord="- ($rcountry)"
				fi
			else
				if ! [[ $rcountry ]] ; then
					rcoord="$rlat,$rlong (-)"
				else
					rcoord="$rlat,$rlong ($rcountry)"
				fi
			fi
			echo -e "Location:\t\t\t$rcoord"
		fi
		mcount=0
		secs=3
		while true
		do
			[[ $mcount -eq 3 ]] && break
			mdns_raw=$((dns-sd -X 2>&1) & pid=$! ; (sleep "$secs" && kill -9 $pid 2>/dev/null))
			mdnsip=$(echo "$mdns_raw" | grep -v -e "^DATE" -e "STARTING" -e "^Timestamp" | sed -n '$p' | awk '{print $3}')
			if [[ $mdnsip ]] ; then
				break
			else
				sleep 1
				((mcount++))
				((secs++))
			fi
		done
		! [[ $mdnsip ]] && mdnsip="-"
		[[ $mdnsip == "0.0.0.0" ]] && mdnsip="0.0.0.0 [tunnel]"
		echo -e "NAT-PMP IP (mDNS):\t\t$mdnsip"
		gateway=$(echo "$routestat" | awk '/gateway:/ {print $2}')
		if ! [[ $gateway ]] ; then
			if ! [[ $arp_raw ]] ; then
				arp_raw=$(arp -a 2>/dev/null | head -1)
			fi
			gateway=$(echo "$arp_raw" | awk -F"[)(]" '{print $1}' | xargs)
		fi
		if ! [[ $gateway ]] ; then
			routerip="[no gateway]"
		else
			if [[ $gateway == "fritz.box" ]] ; then
				routerip=$(curl "http://fritz.box:49000/igdupnp/control/WANIPConn1" -H "Content-Type: text/xml; charset="utf-8"" -H "SoapAction:urn:schemas-upnp-org:service:WANIPConnection:1#GetExternalIPAddress" -d "<?xml version='1.0' encoding='utf-8'?> <s:Envelope s:encodingStyle='http://schemas.xmlsoap.org/soap/encoding/' xmlns:s='http://schemas.xmlsoap.org/soap/envelope/'> <s:Body> <u:GetExternalIPAddress xmlns:u='urn:schemas-upnp-org:service:WANIPConnection:1' /> </s:Body> </s:Envelope>" -s \
					| grep -Eo '\<[[:digit:]]{1,3}(\.[[:digit:]]{1,3}){3}\>')
			else
				routerip="[AP not supported]"
			fi
		fi
		echo -e "Gateway public IP:\t\t$routerip"
		if ps aux | grep openvpn | grep root &>/dev/null ; then
			vpninfo=$(netstat -nr | grep "^0\/1")
			vpndevice=$(echo "$vpninfo" | awk '{print $4}')
			if [[ $vpndevice ]] ; then
				echo -e "OpenVPN device:\t\t$vpndevice"
				vpngw=$(echo "$vpninfo" | awk '{print $2}')
				! [[ $vpngw ]] && vpngw="-"
				echo  -e "OpenVPN gateway IP:\t\t$vpngw"
				vpnip=$(ipconfig getifaddr "$vpndevice" 2>/dev/null)
				if ! [[ $vpnip ]] ; then
					vpnip=$(ifconfig "$vpndevice" | grep "inet " | awk '{print $2}')
				fi
				! [[ $vpnip ]] && vpnip="-"
				echo -e "OpenVPN virtual IP:\t\t$vpnip"
			else
				vpndevice="-"
				vpnip="-"
				echo -e "OpenVPN:\t\t\t$vpndevice\nOpenVPN IP:\t\t\t$vpnip"
			fi
		fi
		if $virtual ; then
			echo -e "Virtual device:\t\t$virtualdevice"
			virtualip=$(ipconfig getifaddr "$virtualdevice" 2>/dev/null)
			if ! [[ $virtualip ]] ; then
				virtualip=$(echo "$vnetworkstatus" | grep "inet " | awk '{print $2}')
			fi
			! [[ $virtualip ]] && virtualip="-"
			echo -e "Virtual IP:\t\t\t$virtualip"
			echo -e "$virtualportstring\nVirtual service:\t\t$virtualservice"
		fi
	else
		echo -e "Public IP:\t\t\t-"
	fi
}

_killbt () {
	transmission-remote --exit &>/dev/null
	sleep 1
	pid=$(pgrep transmission-daemon 2>/dev/null)
	if [[ $pid ]] ; then
		kill -n 15 "$pid" &>/dev/null
	fi
}

_torrent () {
	if ! command -v transmission-daemon &>/dev/null || ! command -v transmission-remote &>/dev/null ; then
		echo -e "Torrent IP:\t\t\tERROR: transmission CLI missing!" >&2
		return
	fi
	nodaemon=false
	if ! pgrep transmission-daemon &>/dev/null ; then
		transmission-daemon &>/dev/null
		sleep 1
		if ! pgrep transmission-daemon &>/dev/null ; then
			echo -e "Torrent IP:\t\t\tERROR launching transmission-daemon!" >&2
			return
		fi
		nodaemon=true
	fi
	ipleakbt=$(transmission-remote -l 2>/dev/null | grep "ipleak\.net+torrent+detection$")
	if ! [[ $ipleakbt ]] ; then
		echo -e "Torrent IP:\t\t\tERROR: no magnet link found!" >&2
		sleep 1
		$nodaemon && _killbt
		return
	fi
	btn=$(echo "$ipleakbt" | awk '{print $1}' | sed 's/\*$//')
	if ! [[ $btn ]] ; then
		echo -e "Torrent IP:\t\t\tERROR parsing IPLeak torrent!" >&2
		sleep 1
		$nodaemon && _killbt
		return
	fi
	transmission-remote -t "$btn" -s &>/dev/null
	sleep 1
	btcount=0
	btsleep=1
	while true
	do
		[[ $btcount -eq 3 ]] && break
		tinfo=$(transmission-remote -t "$btn" -i 2>/dev/null | grep "Tracker gave a warning: Detected IP:")
		[[ $tinfo ]] && break
		sleep "$btsleep"
		((btsleep++))
		((btcount++))
	done
	if ! [[ $tinfo ]] ; then
		echo -e "Torrent IP:\t\t\tERROR: torrent info missing!" >&2
		sleep 1
		$nodaemon && _killbt
		return
	fi
	torrentip=$(echo "$tinfo" | awk -F" IP:" '{print $2}')
	! [[ $torrentip ]] && torrentip="-"
	sleep 1
	transmission-remote -t "$btn" -S &>/dev/null
	sleep 1
	echo -e "Torrent IP:\t\t\t$torrentip"
	$nodaemon && _killbt
}

_local () {
	if $localdev ; then
		localip=$(ipconfig getifaddr "$localdevice" 2>/dev/null)
		if ! [[ $localip ]] ; then
			localip=$(echo "$networkstatus" | grep "inet " | awk '{print $2}')
			! [[ $localip ]] && localip="-"
		fi
	else
		localip="-"
	fi
	echo -e "Local IP:\t\t\t$localip"
	macaddr=$(networksetup -getmacaddress "$localdevice" 2>/dev/null | awk '/Ethernet/ {print $3}')
	! [[ $macaddr ]] && macaddr="-"
	echo -e "MAC address:\t\t$macaddr"
	localhosts=$(netstat -nr | grep "lo0" | grep -v "link#" | awk '{print $1}' | grep "^[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*$")
	lcount=1
	while read -r lhip
	do
		if [[ $lcount -lt 10 ]] ; then
			plcount="0$lcount"
		else
			plcount="$lcount"
		fi
		echo -e "Localhost #$plcount:\t\t$lhip"
		((lcount++))
	done < <(echo "$localhosts" | grep -v "^$")
	nhost=$(scutil --get HostName 2>/dev/null)
	! [[ $nhost ]] && nhost="-"
	echo -e "HostName:\t\t\t$nhost"
	ncomp=$(scutil --get ComputerName 2>/dev/null)
	! [[ $ncomp ]] && ncomp="-"
	echo -e "ComputerName (SLP/DA):\t\t$ncomp"
	netbiosn=$(/usr/libexec/PlistBuddy -c "Print :NetBIOSName" "/Library/Preferences/SystemConfiguration/com.apple.smb.server.plist" 2>/dev/null)
	! [[ $netbiosn ]] && netbiosn="-"
	echo -e "NetBIOS name:\t\t$netbiosn"
	nlocalhost=$(scutil --get LocalHostName 2>/dev/null)
	if ! [[ $nlocalhost ]] ; then
		echo -e "LocalHostName (Bonjour):\t-\nBonjour domain:\t\t-"
	else
		echo -e "LocalHostName (Bonjour):\t$nlocalhost\nBonjour domain:\t\t$nlocalhost.local"
	fi
	activedirn=$(dsconfigad -show 2>/dev/null | grep -i 'Computer' | awk -F "= " '{printf $NF}')
	! [[ $activedirn ]] && activedirn="-"
	echo -e "Computer ID (Active Directory):\t$activedirn"
	if ! [[ $arp_raw ]] ; then
		arp_raw=$(arp -a 2>/dev/null | head -1)
	fi
	if ! [[ $gateway ]] ; then
		gateway=$(echo "$routestat" | awk '/gateway:/ {print $2}')
		if ! [[ $gateway ]] ; then
			gateway=$(echo "$arp_raw" | awk -F"[)(]" '{print $1}' | xargs)
		fi
	fi
	if ! [[ $gateway ]] || [[ $gateway == "?" ]] ; then
		gateway="-"
	fi
	echo -e "Gateway domain:\t\t$gateway"
	if ! [[ $apaddr ]] ; then
		apaddr=$(echo "$arp_raw" | awk -F"[)(]" '{print $2}')
	fi
	! [[ $apaddr ]] && apaddr="-"
	echo -e "Gateway IP:\t\t\t$apaddr"
	netbios=$(smbutil status -e "$apaddr" 2>/dev/null | awk -F": " '/^Server:/{print $2}')
	! [[ $netbios ]] && netbios="-"
	echo -e "Gateway NetBIOS name:\t\t$netbios"

	if ! [[ $wifi_full ]] ; then
		wifi_full=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I 2>/dev/null)
	fi

	wifi_raw=$(echo "$wifi_full" | grep "SSID:")
	if [[ $wifi_raw ]] ; then
		ssid=$(echo "$wifi_raw" | grep -v "BSSID:" | awk -F": " '/SSID:/{print $NF}')
		! [[ $ssid ]] && ssid="-"
		bssid=$(echo "$wifi_raw" | awk -F": " '/BSSID:/{print $NF}')
		if ! [[ $bssid ]] || [[ $bssid == "0:0:0:0:0:0" ]] ; then
			bssid="-"
		fi
	else
		ssid="-"
		bssid="-"
	fi
	echo -e "SSID:\t\t\t$ssid"
	echo -e "BSSID:\t\t\t$bssid"
	apether=$(echo "$arp_raw" | awk -F")" '{print $NF}' | sed -e "s/^ at //" -e "s/ on .*//" | xargs)
	! [[ $apether ]] && apether="-"
	echo -e "Gateway MAC address:\t\t$apether"
}

_dns () {
	if ! $offline ; then
		dcount=0
		dsleep=1
		while true
		do
			[[ $dcount -eq 3 ]] && break
			dnsip=$(dig whoami.akamai.net +short 2>/dev/null)
			[[ $dnsip ]] && break
			sleep "$dsleep"
			((dcount++))
			((dsleep++))
		done
		if [[ $dnsip ]] ; then
			echo -e "DNS IP:\t\t\t$dnsip"
			dnsname=$(dig +short -x "$dnsip" 2>/dev/null | sed 's/\.$//' | grep -v "^$")
			! [[ $dnsname ]] && dnsname="-"
			echo -e "DNS Name:\t\t\t$dnsname"
			dnswhoisraw=$(whois "$dnsip" 2>/dev/null)
			dnsorg=$(echo "$dnswhoisraw" | grep -e "^org-name:" -e "^OrgName:" | grep -v "^$" | awk '!a[$0]++' | awk -F":" '{print substr($0, index($0,$2))}' | head -1 | xargs | grep -v "^$")
			if ! [[ $dnsorg ]] ; then
				dnsorg=$(echo "$dnswhoisraw" | grep "^descr:" | grep -v "^$" | awk '!a[$0]++' | awk -F":" '{print substr($0, index($0,$2))}' | head -1 | xargs | grep -v "^$")
			fi
			! [[ $dnsorg ]] && dnsorg="-"
			echo -e "Provider/Organization:\t\t$dnsorg"
			if $rloc ; then
				$fullip && sleep 1
				IFS=$'\n' read -rd '' rcountry rlat rlong < <(curl -sL --connect-timeout 10 --max-time 10 "http://ip-api.com/line/$dnsip?fields=193" 2>/dev/null)
				if ! [[ $rlat ]] || ! [[ $rlong ]] ; then
					if ! [[ $rcountry ]] ; then
						dnsrcoord="-"
					else
						dnsrcoord="- ($rcountry)"
					fi
				else
					if ! [[ $rcountry ]] ; then
						dnsrcoord="$rlat,$rlong (-)"
					else
						dnsrcoord="$rlat,$rlong ($rcountry)"
					fi
				fi
				echo -e "Location:\t\t\t$dnsrcoord"
			fi
		else
			echo -e "DNS IP:\t\t\t-"
		fi
	else
		echo -e "DNS IP:\t\t\t-"
	fi
	nameservers=$(scutil --dns 2>/dev/null | awk '/^DNS configuration$/,/^DNS configuration \(for scoped queries\)$/' | awk '/^DNS configuration$/,/ \(Not Reachable\)$/' | grep "nameserver\[" | sort | awk '!a[$0]++')
	if [[ $nameservers ]] ; then
		count=1
		while read -r nsip
		do
			! [[ $nsip ]] && nsip="[error]"
			if [[ $count -lt 10 ]] ; then
				dcount="0$count"
			else
				dcount="$count"
			fi
			echo -e "DNS resolver #$dcount:\t\t$nsip"
			((count++))
		done < <(echo "$nameservers" | awk '{print $NF}')
	else
		echo -e "DNS resolver:\t\t-"
	fi
	if $localdev ; then
		localdnsip=$(ipconfig getoption "$localdevice" domain_name_server 2>/dev/null)
		! [[ $localdnsip ]] && localdnsip="-"
	else
		localdnsip="-"
	fi
	echo -e "Local DNS IP:\t\t$localdnsip"
}

_geo () {
	geoloc_all=$(osascript 2>/dev/null <<EOG
use framework "CoreLocation"
use framework "Foundation"
use scripting additions

property this : a reference to the current application
property nil : a reference to missing value
property _1 : a reference to reference

property CLLocationManager : a reference to CLLocationManager of this
property kCLLocationAccuracyThreeKilometers : a reference to 3000.0
--------------------------------------------------------------------------------
property running : false
property result : missing value -- Lat./long. or error description
property number : 0 -- Error code
property seconds : 10 -- Maximum time to allow script to run
--------------------------------------------------------------------------------
# IMPLEMENTATION:
my performSelectorOnMainThread:"getLocation" withObject:nil waitUntilDone:true
return my result
--------------------------------------------------------------------------------
# HANDLERS & SCRIPT OBJECTS:
to getLocation()
    set locationManager to CLLocationManager's new()

    locationManager's setDelegate:me
    locationManager's setDesiredAccuracy:kCLLocationAccuracyThreeKilometers

    set my running to true
    set started to current date

    locationManager's startUpdatingLocation()

    repeat while my running
        delay 0.5
        if (current date) - started > my seconds then exit repeat
    end repeat
end getLocation

on locationManager:locationManager didUpdateLocations:locations
    local locationManager, locations

    locationManager's stopUpdatingLocation()

    set my running to false
    set my result to (locations's valueForKey:"coordinate") as record
end locationManager:didUpdateLocations:

on locationManager:locationManager didFailWithError:err
    local locationManager, err

    tell err's code()
        set my number to it
        set my result to item (it + 1) in my enum's kCLError
        if it ≠ 0 then set my running to false
    end tell
end locationManager:didFailWithError:

script enum
    property kCLError : {¬
        "Location Unknown", ¬
        "Denied", ¬
        "Network", ¬
        "Heading Failure", ¬
        "Region Monitoring Denied", ¬
        "Region Monitoring Failure", ¬
        "Region Monitoring Setup Delayed", ¬
        "Region Monitoring Response Delayed", ¬
        "Geocode Found No Result", ¬
        "Geocode Found Partial Result", ¬
        "Geocode Canceled", ¬
        "Deferred Failed", ¬
        "Deferred Not Updating Location", ¬
        "Deferred Accuracy Too Low", ¬
        "Deferred Distance Filtered", ¬
        "Deferred Canceled", ¬
        "Ranging Unavailable", ¬
        "Ranging Failure"}
    property CLAuthorizationStatus : {¬
        "Not Determined", ¬
        "Restricted", ¬
        "Denied", ¬
        "Authorized (Always)", ¬
        "Authorized When In Use"}
end script
---------------------------------------------------------------------------❮END❯
EOG
	)
	geo_error=false
	if ! [[ $geoloc_all ]] ; then
		geoloc_all=$(CoreLocationCLI 2>/dev/null)
		if ! [[ $geoloc_all ]] ; then
			echo -e "Geolocation:\t\t-"
			geo_error=true
		else
			latitude=$(echo "$geoloc_all" | awk '{print $1}')
			longitude=$(echo "$geoloc_all" | awk '{print $2}')
			echo -e "Geolocation:\t\t$latitude,$longitude"
		fi
	else
		geoloc_raw=$(echo "$geoloc_all" | awk -F"," '{print $1}')
		latitude=$(echo "$geoloc_raw" | awk -F":" '{print $2}')
		if ! [[ $latitude ]] ; then
			echo -e "Geolocation:\t\t-"
			geo_error=true
		else
			longitude=$(echo "$geoloc_all" | awk -F":" '{print $3}')
			if ! [[ $longitude ]] ; then
				echo -e "Geolocation:\t\t-"
				geo_error=true
			else
				echo -e "Geolocation:\t\t$latitude,$longitude"
			fi
		fi
	fi
}


_help () {
	read -d '' helpdoc <<"EOH"
myip ip=<IP address> <ARGUMENTS>

	OPTION

	ip=	:	input your public IP, if it is already known

	OUTPUT ARGUMENTS

	ip	:	public IP only

	net	:	public IPs and related info incl. NAT-PMP
	bt	:	torrent IP address (requires transmission CLI & an IP tracking torrent)
	ether	:	additional local data like network IPs, hostname, MAC addresses, SSID etc.
	dns	:	public & local DNS IPs, local resolvers & related info
	loc	:	coordinates & country of public IPs (only with 'net' or 'dns')
	geo	:	local geolocation (latitude & longitude)
	addr	:	local geolocation (address)
	map	:	print URLs to open local geolcation in Apple Maps, OSM or Google Maps

	all	:	all of the above

	OTHER ARGUMENTS

	msg	:	share geolocation & address via Apple Messages (requires terminal-share CLI)
	mail	:	share geolocation & address via Apple Mail (requires terminal-share CLI)

	version	:	version number
	help	:	this help document
EOH
	echo "$helpdoc"
}

simpleip=false
fullip=false
torrent=false
localdata=false
dnsinfo=false
rloc=false
lgeo=false
maps=false
address=false
share=false
message=false
email=false
ipopt=false
dnslytics=false

if [[ $1 == "ip="* ]] ; then
	publicip=$(echo "$1" | awk -F"=" '{print $2}')
	if ! [[ $publicip ]] ; then
		echo -e "ERROR: IP address input missing!\n" >&2
		_help
		exit 1
	fi
	if ! echo "$publicip" | grep -o "^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$" &>/dev/null ; then
		echo -e "ERROR: $publicip has the wrong format!\n" >&2
		_help
		exit 1
	fi
	shift
	ipopt=true
fi

if ! [[ $1 ]] ; then
	if $ipopt ; then
		echo -e "Public IP:\t$publicip"
		exit 0
	fi
	simpleip=true
else
	argsn="$#"
	while test -n "$1"
	do
		case "$1" in
			help)
				if [[ $argsn -eq 1 ]] ; then
					_help
					exit 0
				else
					shift
				fi
				;;
			version)
				if [[ $argsn -eq 1 ]] ; then
					echo "$process $vno"
					exit 0
				else
					shift
				fi
				;;
			ip)
				simpleip=true
				if [[ $argsn -eq 1 ]] ; then
					if $ipopt ; then
						echo -e "Public IP:\t$publicip"
						exit 0
					fi
					break
				else
					shift
				fi
				;;
			all)
				simpleip=false
				fullip=true
				torrent=true
				localdata=true
				dnsinfo=true
				rloc=true
				lgeo=true
				address=true
				maps=true
				dnslytics=true
				shift
				;;
			net)
				simpleip=false
				fullip=true
				shift
				;;
			bt)
				torrent=true
				shift
				;;
			ether)
				localdata=true
				shift
				;;
			dns)
				dnsinfo=true
				shift
				;;
			loc)
				if [[ $argsn -eq 1 ]] ; then
					_help
					exit 0
				else
					rloc=true
					shift
				fi
				;;
			geo)
				lgeo=true
				shift
				;;
			addr)
				lgeo=true
				address=true
				shift
				;;
			map)
				lgeo=true
				maps=true
				shift
				;;
			msg)
				share=true
				lgeo=true
				address=true
				maps=true
				message=true
				email=false
				shift
				;;
			mail)
				share=true
				lgeo=true
				address=true
				maps=true
				message=false
				email=true
				shift
				;;
			*)
				_help
				exit 0
				;;
		esac
	done
fi

localdev=true
virtual=false
routestat=$(route get 0.0.0.0 2>&1)
localdevice=$(echo "$routestat" | awk -F": " '/interface:/{print $2}')
if ! [[ $localdevice ]] ; then
	echo "ERROR: no route" >&2
	localdev=false
	localdevice="-"
else
	networkstatus=$(ifconfig "$localdevice" 2>/dev/null)
	if ! echo "$networkstatus" | grep -q "status: active$" &>/dev/null ; then
		if [[ $localdevice == "utun"* ]] || [[ $localdevice == "tun"* ]] || [[ $localdevice == "utap"* ]] || [[ $localdevice == "tap"* ]] || [[ $localdevice == "vtap"* ]] || [[ $localdevice == "feth"* ]] ; then
			virtual=true
			arp_raw=$(arp -a 2>/dev/null | head -1)
			apaddr=$(echo "$arp_raw" | awk -F"[)(]" '{print $2}')
			apagrep=$(echo "$apaddr" | sed 's/\./\\./g')
			virtualdevice="$localdevice"
			localdevice=$(netstat -nr | grep "$apagrep" | grep "^default" | awk '{print $4}')
			if ! [[ $localdevice ]] ; then
				localdevice="-"
				echo "ERROR: unknown local device status" >&2
			else
				vnetworkstatus="$networkstatus"
				networkstatus=$(ifconfig "$localdevice" 2>/dev/null)
				if ! echo "$networkstatus" | grep -q "status: active$" &>/dev/null ; then
					echo "ERROR: device $localdevice inactive" >&2
				fi
			fi
		else
			echo "ERROR: device $localdevice inactive" >&2
		fi
	fi
fi

if $localdev ; then
	service_all=$(networksetup -listnetworkserviceorder 2>/dev/null)
	service_raw=$(echo "$service_all" | grep -B1 "Device: $localdevice)$")
	if [[ $service_raw ]] ; then
		hwport=$(echo "$service_raw" | grep "$localdevice)$" | awk '{print substr($0, index($0,$3))}' | cut -d, -f1 | xargs)
		! [[ $hwport ]] && hwport="-"
		hwportstring="Hardware Port:\t\t$hwport"
		service=$(echo "$service_raw" | head -1 | awk -F")" '{print substr($0, index($0,$2))}' | xargs)
		! [[ $service ]] && service="-"
		if $virtual ; then
			vservice_raw=$(echo "$service_all" | grep -B1 "Device: $virtualdevice)$")
			if ! [[ $vservice_raw ]] ; then # virtual device not listed by macOS
				virtualport_raw=$(echo "$service_all" | grep "Device: )$" | cut -d, -f1 | sort)
				if ! [[ $virtualport_raw ]] ; then
					virtualportstring="Virtual port:\t\t-"
					virtualservice="-"
				else
					if [[ $(echo "$virtualport_raw" | wc -l) -gt 1 ]] ; then # several presets or ports
						virtualport_discrete=$(echo "$virtualport_raw" | awk '!a[$0]++')
						if [[ $(echo "$virtualport_discrete" | wc -l) -gt 1 ]] ; then # more than one port
							virtualport=$(echo "$virtualport_discrete" | awk -F": " '/Hardware Port: /{print $2}' | tr '\n' '|' | sed -e 's/|$//' -e 's/|/ | /g')
							! [[ $virtualport ]] && virtualport="-"
							virtualportstring="Potential virtual ports:\t$virtualport"
							virtualservice="-"
						else # only one port, but several presets
							virtualport=$(echo "$virtualport_discrete" | awk -F": " '{print $2}')
							! [[ $virtualport ]] && virtualport="-"
							virtualportstring="Virtual port:\t\t$virtualport"
							virtualservice="-"
						fi
					else # only one port or preset
						virtualport=$(echo "$virtualport_raw" | awk -F": " '{print $2}')
						if ! [[ $virtualport ]] ; then
							virtualportstring="Virtual port:\t\t-"
							virtualservice="-"
						else
							virtualportstring="Virtual port:\t\t$virtualport"
							virtualservice=$(echo "$service_all" | grep -B1 "Hardware Port: $virtualport" | head -1 | awk '{print substr($0, index($0,$2))}')
							! [[ $virtualservice ]] && virtualservice="-"
						fi
					fi
				fi
			else # virtual device listed by macOS
				virtualport=$(echo "$vservice_raw" | grep "$virtualdevice)$" | awk '{print substr($0, index($0,$3))}' | cut -d, -f1)
				if ! [[ $virtualport ]] ; then # something went wrong
					virtualportstring="Virtual Port:\t\t$-"
					virtualservice="-"
				else
					if [[ $(echo "$virtualport" | wc -l) -gt 1 ]] ; then # more than one entry for this port: service name is unavailable
						virtualservice="-"
						virtualport=$(echo "$virtualport" | sort | awk '!a[$0]++')
						if [[ $(echo "$virtualport" | wc -l) -gt 1 ]] ; then # more than one discrete port: only potential results
							virtualport=$(echo "$virtualport" | tr '\n' '|' | sed -e 's/|$//' -e 's/|/ | /g')
							! [[ $virtualport ]] && virtualport="-"
							virtualportstring="Potential virtual ports:\t$virtualport"
						else # only one discrete port: port is available
							virtualportstring="Virtual Port:\t\t$virtualport"
						fi
					else # only one entry for this port: port & service names should be available
						virtualportstring="Virtual Port:\t\t$virtualport"
						virtualservice=$(echo "$vservice_raw" | head -1 | awk -F")" '{print substr($0, index($0,$2))}' | xargs)
						! [[ $virtualservice ]] && virtualservice="-"
					fi
				fi
			fi
		fi
	else
		hwport=$(echo "$service_all" | grep "Device: )$" | awk '{print substr($0, index($0,$3))}' | cut -d, -f1 | awk '!a[$0]++' | tr '\n' '|' | sed -e 's/|$//' -e 's/|/ | /g')
		hwportstring="Potential virtual ports:\t$hwport"
		service="-"
	fi
else
	hwportstring="Hardware Port:\t\t-"
	service="-"
fi

offline=false
if $localdev ; then
	if ! ping -q -c 1 -t 10 1.1.1.1 &>/dev/null ; then
		echo "ERROR: offline" >&2
		offline=true
	fi
else
	echo "ERROR: offline" >&2
	offline=true
fi

nowifi=false
if $lgeo ; then
	wifi_full=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I 2>/dev/null)
	if [[ $wifi_full == "AirPort: Off" ]] ; then
		echo "ERROR: Wi-Fi disabled" >&2
		nowifi=true
	fi
fi

if $simpleip ; then
	if ! $ipopt ; then
		simple_IP
	fi
	! [[ $publicip ]] && publicip="-"
	echo -e "Public IP:\t$publicip"
fi

if $fullip ; then
	_ip
	if $torrent ; then
		if ! $offline ; then
			_torrent
		fi
	fi
	echo -e "Device:\t\t\t$localdevice"
	echo -e "$hwportstring"
	echo -e "Service:\t\t\t$service"
	if $localdata ; then
		_local
	fi
	if $dnsinfo ; then
		_dns
	fi
else
	if $torrent ; then
		echo -e "Device:\t\t\t$localdevice"
		echo -e "$hwportstring"
		echo -e "Service:\t\t\t$service"
		if ! $offline ; then
			_torrent
		fi
	fi
	if $localdata ; then
		if ! $torrent ; then
			echo -e "Device:\t\t\t$localdevice"
			echo -e "$hwportstring"
			echo -e "Service:\t\t\t$service"
		fi
		_local
		if $dnsinfo ; then
			_dns
		fi
	else
		if $dnsinfo ; then
			_dns
			if ! $torrent ; then
				echo -e "Device:\t\t\t$localdevice"
				echo -e "$hwportstring"
				echo -e "Service:\t\t\t$service"
			fi
		fi
	fi
fi

if $lgeo ; then
	if $nowifi ; then
		echo -e "Geolocation:\t\t-"
	else
		_geo
		if $address && ! $geo_error ; then
			if ! $offline ; then
				ccount=0
				while true
				do
					[[ $ccount -eq 3 ]] && break
					addrinfo=$(curl -sL --connect-timeout 10 --max-time 10 -X POST -d locate="$latitude,$longitude" -d geoit="XML" "https://geocode.xyz" 2>/dev/null)
					if echo "$addrinfo" | head -1 | grep -q "geodata" &>/dev/null ; then
						break
					else
						addrinfo=""
					fi
					((ccount++))
					sleep 2
				done
				if ! [[ $addrinfo ]] ; then
					fulladdr="-"
				else
					city=$(echo "$addrinfo" | grep "\<city\>" | awk '!a[$0]++' | head -1 | awk -F"[><]" '{print $3}')
					if ! [[ $city ]] ; then
						fulladdr="-"
					else
						state=$(echo "$addrinfo" | grep "\<region\>" | awk '!a[$0]++' | head -1 | awk -F"[><]" '{print $3}')
						if ! [[ $state ]] ; then
							state=$(echo "$addrinfo" | grep "\<state\>" | awk '!a[$0]++' | head -1 | awk -F"[><]" '{print $3}')
							! [[ $state ]] && state="-"
						fi
						country=$(echo "$addrinfo" | grep "\<country\>" | awk '!a[$0]++' | head -1 | awk -F"[><]" '{print $3}')
						! [[ $country ]] && country="-"
						postal=$(echo "$addrinfo" | grep "\<postal\>" | awk '!a[$0]++' | head -1 | awk -F"[><]" '{print $3}')
						! [[ $postal ]] && postal="-"
						stnumber=$(echo "$addrinfo" | grep "\<stnumber\>" | awk '!a[$0]++' | head -1 | awk -F"[><]" '{print $3}')
						! [[ $stnumber ]] && stnumber="-"
						staddress=$(echo "$addrinfo" | grep "\<staddress\>" | awk '!a[$0]++' | head -1 | awk -F"[><]" '{print $3}')
						! [[ $staddress ]] && staddress="-"
						fulladdr="$stnumber $staddress, $city $postal, $state, $country"
					fi
				fi
				echo -e "Address:\t\t\t$fulladdr"
			else
				echo -e "Address:\t\t\t-"
			fi
		fi
		if $maps && ! $geo_error ; then
			am_url="https://maps.apple.com/?q=$latitude,$longitude&t=m"
			gm_url="https://maps.google.com/maps?ll=$latitude,$longitude&q=$latitude,$longitude&hl=en&t=m&z=19"
			osm_url="https://www.openstreetmap.org/?mlat=$latitude&mlon=$longitude&zoom=19&layers=M"
			echo -e "Apple Maps:\t\t\t$am_url"
			echo -e "Google Maps:\t\t$gm_url"
			echo -e "OpenStreetMap:\t\t$osm_url"
		fi
		if $share && ! $geo_error ; then
			if ! command -v terminal-share &>/dev/null ; then
				echo "ERROR: Sharing function requires terminal-share: https://github.com/mattt/terminal-share"
			else
				sharetext="I am currently here:\n\nAddress: $fulladdr\nCoordinates: $latitude,$longitude\n\nApple Maps: $am_url\nGoogle Maps: $gm_url\nOpenStreetMap: $osm_url\n\nShared with: $process v$vno"
				finalsharetext=$(echo -e "\"$sharetext\"")
				if $message ; then
					terminal-share -service message -text "$finalsharetext" 2>/dev/null &
				elif $email ; then
					terminal-share -service email -text "$finalsharetext" 2>/dev/null &
				fi
			fi
		fi
	fi
fi

if $dnslytics ; then
	if [[ $publicip ]] ; then
		echo -e "Details:\t\t\thttps://dnslytics.com/ip/$publicip"
	else
		echo -e "Details:\t\t\t-"
	fi
fi

exit 0
