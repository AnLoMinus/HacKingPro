#!/bin/bash
# -----------------------------------------------------------------------------
# CheckMacSec : Check for macOS security settings and patches
# -----------------------------------------------------------------------------

# ------------------------- #
userName="$(whoami)"
# ------------------------- #

# ------------------------- #
intro_message() {
	clear
    	echo "\n[ ==================================================== ]"
    	echo "[ =========== security checkup for macOS ============= ]"
    	echo "[ ==================================================== ]"
			echo "Beginning security checkup...\n"
}
# ------------------------- #

# ------------------------- #
sys_vers() {
	echo "\nSystem version is: "
}
# ------------------------- #

# ------------------------- #
software_updates() {
	echo "\nChecking for software updates from Apple\n"
	softwareupdate -l
}
# ------------------------- #

# ------------------------- #
check_efi_password() {
	checkPass="$(/usr/sbin/firmwarepasswd -check | awk '/Password/ {print $(3) }')"
	if [ "$checkPass" == "Yes" ] ; then
    		echo "\nEFI password enabled!</result>\n"
	else
    		echo "\n*** NO EFI password set!\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_update_settings() {
	autoCheckEnabled="$(defaults read /Library/Preferences/com.apple.SoftwareUpdate | awk '/AutomaticCheckEnabled = / {print $(3) }')"
	if [ "$autoCheckEnabled" != "1;" ] ; then
		echo "\n*** Automatic checking for updates is not on\n"
	fi
	# parameter for automatic app updates
	commerceAutoUpdate="$(defaults read /Library/Preferences/com.apple.commerce | awk '/AutoUpdate = / {print $(3) }')"
	if [ "$commerceAutoUpdate" != "1;" ] ; then
		echo "\n*** Automatic app updates disabled\n"
	fi
	# parameter for macOS updates
	autoMacUpdate="$(defaults read /Library/Preferences/com.apple.commerce | awk '/AutoUpdateRestartRequired = / {print $(3) }')"
	if [ "$autoMacUpdate" != "1;" ] ; then
		echo "\n*** Automatic macOS updates disabled\n"
	fi
	# parameter for automatic download of available updates
	autoMacDownload="$(defaults read /Library/Preferences/com.apple.SoftwareUpdate | awk '/AutomaticDownload = / {print $(3) }')"
	if [ "$autoMacDownload" != "1;" ] ; then
		echo "\n*** Automatic download of available updates disabled\n"
	fi
	# first parameter as part of "install system files" option
	sysDataFiles1="$(defaults read /Library/Preferences/com.apple.SoftwareUpdate | awk '/CriticalUpdateInstall = / {print $(3) }')"
	if [ "$sysDataFiles1" != "1;" ] ; then
		echo "\n*** Automatic installation of critical updates disabled! (1/2)\n"
	fi
	# second parameter as part of "install system files" option
	sysDataFiles2="$(defaults read /Library/Preferences/com.apple.SoftwareUpdate | awk '/ConfigDataInstall = / {print $(3) }')"
	if [ "$sysDataFiles2" != "1;" ] ; then
		echo "\n*** Automatic installation of critical updates disabled! (2/2)\n"
	fi
}
check_remote_access() {
	sshCheck="$(systemsetup getremotelogin | awk '/Remote/ {print $(3) }')"
	if [ "$sshCheck" == "On" ] ; then
		echo "\n*** SSH server is on!\n"
	fi
	lineTemplate="com.apple.RemoteDesktop.agent"
	ARD="$(launchctl list | grep '^\d.*RemoteDesktop.*')"
	Agent="$(echo $ARD | awk '/com.apple.RemoteDesktop.agent/ {print $(NF) }')"
	if [ "$Agent" == "$lineTemplate" ] ; then
		echo "\n*** Apple Remote Desktop may be on!\n"
	fi
	if [ -f /etc/com.apple.screensharing.agent.launchd ] ; then
		echo "\n*** Screen sharing may be on!\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_logged_in() {
	echo "\nSSH/Telnet Users logged in:"
	who
	echo "\nUsers that have logged in:"
	last
}
# ------------------------- #

# ------------------------- #
check_guest() {
	guestEnabled="$(defaults read /Library/Preferences/com.apple.loginwindow GuestEnabled)"
	if [ "$guestEnabled" == "1" ] ; then
		echo "\n*** The Guest account is enabled!\n"
	else
		echo "\nThe Guest account is disabled\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_file_sharing() {
	if [ "$(launchctl list | grep AppleFileServer)" != "" ] ; then
		echo "\n*** File sharing over AFP is ON\n"
	fi
	if [ "$(launchctl list | grep smbd)" != "" ] ; then
		echo \n"*** File sharing over SMB is ON\n"
	fi

	if [ "$(launchctl list | grep AppleFileServer)" == "" ] && [ "$(sudo launchctl list | grep smbd)" == "" ] ; then
		echo "\nFile sharing is off\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_gatekeeper() {
	gkeeperOn="$(spctl --status | grep 'enabled')"
	if [ "$gkeeperOn" == "assessments enabled" ] ; then
		echo "\nGatekeeper is on\n"
	else
		echo "\n*** Gatekeeper is off!\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_SIP() {
	sipEnabled="$(csrutil status | grep 'enabled')"
	if [ "$sipEnabled" == "System Integrity Protection status: enabled." ] ; then
		echo "System Integrity Protection is enabled"
	else
		echo "\n*** System Integrity Protection is disabled!\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_ALF() {
	globalState="$(defaults read /Library/Preferences/com.apple.alf.plist globalstate)"
	if [ "$globalState" == "1" ] ; then
		echo "\nApplication Layer Firewall is enabled\n"
	else
		echo "\n*** Application Layer Firewall is disabled!\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_stealth() {
	stealthStatus="$(defaults read /Library/Preferences/com.apple.alf.plist stealthenabled)"
	if [ "$stealthStatus" == "0" ] ; then
		echo "\n*** Application Layer Firewall stealth mode Disabled!\n"
	else
		echo "\nApplication Layer Firewall stealth mode enabled\n"
	fi
}
# ------------------------- #

# ------------------------- #
check_hostname() {
	hostname > /tmp/HostName.txt
	baseModel="$(system_profiler -detaillevel mini | grep 'Model Name' | awk '/Model Name/ {print $3}')"
	if [ "$(grep '$baseModel' /tmp/HostName.txt)" != "" ] ; then
		echo "*** Hostname is default!"
	else
		echo "Hostname is not default"
	fi
	rm /tmp/HostName.txt
}
# ------------------------- #

# -----------------------------------------------------------------------------
intro_message
sys_vers
software_updates
check_update_settings
check_efi_password
check_remote_access
check_logged_in
check_guest
check_file_sharing
check_gatekeeper
check_SIP
check_ALF
check_stealth
check_hostname
exit
# -----------------------------------------------------------------------------
