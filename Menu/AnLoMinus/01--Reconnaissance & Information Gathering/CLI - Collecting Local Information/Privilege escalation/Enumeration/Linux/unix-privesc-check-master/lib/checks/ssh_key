#!/bin/sh
# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>
#
# List unencrypted SSH client private keys

. lib/misc/file
. lib/misc/group
. lib/misc/stdio

ssh_key_init () {
	stdio_message_log "ssh_key" "Starting at: `date`"
}

ssh_key_permissions () {
	filename="${1}"
	file_show_non_symlink_perms " ${filename}$" | while read filename permissions userid groupid
	do
		case "${permissions}" in
			???????r??)
				stdio_message_warn "ssh_key" "key ${filename} is owned by user ${userid} (group ${groupid}) and is world-readable (${permissions})"
				;;
			????r?????)
				if [ "`group_is_in_group_name \"${groupid}\"`" -eq 1 ]
				then
					stdio_message_warn "ssh_key" "key ${filename} is owned by user ${userid} (group ${groupid}: YOU) and is group-readable (${permissions})"
				else
					stdio_message_log "ssh_key" "key ${filename} is owned by user ${userid} (group ${groupid}) and is group-readable (${permissions})"
				fi
				;;
		esac
	done

}

ssh_key_main () {
	# TODO we should expand this list
	# * parse the local SSH server configuration file /etc/ssh/ssh_config 
	#   and add to the pattern the value of IdentityFile option
	# * list files in home directories' .ssh/ and add to pattern list the
	#   ones with and without .pub extension
	for pattern in "*id_dsa*" "*id_rsa*"
	do
		file_list_by_filename "${pattern}" | while read filename
		do
			ssh_key_permissions "${filename}"
			if [ "`file_matches_string "${filename}" "ENCRYPTED"`" -ne 1 ]
			then
				stdio_message_warn "ssh_key" "${filename} is unencrypted"
			else
				stdio_message_log "ssh_key" "${filename} is encrypted"
			fi
		done
	done
}

ssh_key_fini () {
	stdio_message_log "ssh_key" "Ending at: `date`"
}
