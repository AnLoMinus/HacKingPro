#!/bin/bash
# Script for pentest enumeration on web domains
# Tweaked by: ex16x41

BRed='\033[1;31m'    # Red
BGreen='\033[1;32m'  # Green
BYellow='\033[1;33m' # Yellow
resetT="\033[m"

## General
version="1.01"									## Version Year.Day
updatedate="Feb 8th,2022"							## The date of the last update
example_domain="evil.com" 							## Example domain
sleeptime=6									## Delay between queries, in seconds
domain=$1 									## Get the domain
browser='Mozilla'								## Browser information for curl
gsite="site:$domain" 								## Google Site


## Misconfigurations
misc1="inurl:jsp" "-www"
misc2="ext:nsf + inurl:nsf"
misc3="ext:php"
misconfigearray=($misc1 $misc2 $misc3)


## Hidden gems
hidd1="-www -support -help -blog -news -login server null"
hiddenearray=($hidd1)


## Login pages
lpadmin="inurl:admin"
lplogin="inurl:login"
lpadminlogin="inurl:adminlogin"
lpcplogin="inurl:cplogin"
lpweblogin="inurl:weblogin"
lpquicklogin="inurl:quicklogin"
lpwp1="inurl:wp-admin"
lpwp2="inurl:wp-login"
lpportal="inurl:portal"
lpuserportal="inurl:userportal"
lploginpanel="inurl:loginpanel"
lpmemberlogin="inurl:memberlogin"
lpremote="inurl:remote"
lpdashboard="inurl:dashboard"
lpauth="inurl:auth"
lpexc="inurl:exchange"
lpfp="inurl:ForgotPassword"
lptest="inurl:test"
loginpagearray=($lpadmin $lplogin $lpadminlogin $lpcplogin $lpweblogin $lpquicklogin $lpwp1 $lpwp2 $lpportal $lpuserportal $lploginpanel $memberlogin $lpremote $lpdashboard $lpauth $lpexc $lpfp $lptest)


## Interesting Filetypes
## This list can find
ftdoc="filetype:doc"						## Filetype DOC (MsWord 97-2003)
ftdocx="filetype:docx"						## Filetype DOCX (MsWord 2007+)
ftxls="filetype:xls"						## Filetype XLS (MsExcel 97-2003)
ftxlsx="filetype:xlsx"						## Filetype XLSX (MsExcel 2007+)
ftppt="filetype:ppt"						## Filetype PPT (MsPowerPoint 97-2003)
ftpptx="filetype:pptx"						## Filetype PPTX (MsPowerPoint 2007+)
ftmdb="filetype:mdb"						## Filetype MDB (Ms Access)
ftpdf="filetype:pdf"						## Filetype PDF
ftsql="filetype:sql"						## Filetype SQL
fttxt="filetype:txt"						## Filetype TXT
ftrtf="filetype:rtf"						## Filetype RTF
ftcsv="filetype:csv"						## Filetype CSV
ftxml="filetype:xml"						## Filetype XML
ftconf="filetype:conf"						## Filetype CONF
ftdat="filetype:dat"						## Filetype DAT
ftini="filetype:ini"						## Filetype INI
ftlog="filetype:log"						## Filetype LOG
ftidrsa="index%20of:id_rsa%20id_rsa.pub"			## File ID_RSA
filetypesarray=($ftdoc $ftdocx $ftxls $ftxlsx $ftppt $ftpptx $ftmdb $ftpdf $ftsql $fttxt $ftrtf $ftcsv $ftxml $ftconf $ftdat $ftini $ftlog $ftidrsa)

## Directory Traversal
dtparent='intitle:%22index%20of%22%20%22parent%20directory%22' 	## Common traversal
dtdcim='intitle:%22index%20of%22%20%22DCIM%22' 					## Photo
dtftp='intitle:%22index%20of%22%20%22ftp%22' 					## FTP
dtbackup='intitle:%22index%20of%22%20%22backup%22'				## BackUp
dtmail='intitle:%22index%20of%22%20%22mail%22'					## Mail
dtpassword='intitle:%22index%20of%22%20%22password%22'			## Password
dtpub='intitle:%22index%20of%22%20%22pub%22'					## Pub
dirtravarray=($dtparent $dtdcim $dtftp $dtbackup $dtmail $dtpassword $dtpub)


echo -e "${BYellow}${resetT}" "${BGreen}
@@@@@@@@@@@@@@@@@@@@@@@@   @@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@             @@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@       (     %      #@@@@@@@@@@@@@@
@@@@@@@@@@@@   %                   %  /@@@@@@@@@@@
@@@@@@@@@   #  #        ,         @   *  @@@@@@@@@
@@@@@@@  /,  %  #                .   .  @  @@@@@@@
@@@@@% ,* .#  %  #@            (@  *  ./  @  @@@@@
@@@@@@@@.@  @  (@@@@          #@@@@  #  & .@@@@@@@
@@@@@@@@@@@@* @@@@@       (    *@@@@  @@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@  @  &     ,,  @@@@@@@@@@@@@@@@@

	Tyr Script for Web Dorks Enumeration
                                                        ${resetT}" "${BYellow}${resetT}"
echo -e "${BYellow}# https://www.linkedin.com/in/evaprokofiev1 | @ex16x41${resetT}"
echo -e "${BYellow}# Version:                 ${resetT}" "${BRed}$version${resetT}"

# Check domain
if [ -z "$domain" ]; then
	echo -e "${BYellow}# Usage example:${resetT}" "${BRed}$0 $example_domain ${resetT}\n"
	exit
else
	echo -e "${BYellow}# Get information about:   ${resetT}" "${BRed}$domain${resetT}"
	echo -e "${BYellow}# Delay between queries:   ${resetT}" "${BRed}$sleeptime${resetT}" "${BYellow}sec${resetT}\n"
fi

### Function to get information about site ### START
function Query {
	result="";
	##### Last number - quantity of possible answers
	for start in `seq 0 10 40`; do
		query=$(echo; curl -sS -b "CONSENT=YES+srp.gws-20211028-0-RC2.es+FX+330" -A $browser "https://www.google.com/search?q=$gsite%20$1&start=$start&client=firefox-b-e")
    checkban=$(echo $query | grep -io "https://www.google.com/sorry/index")
		if [ "$checkban" == "https://www.google.com/sorry/index" ]; then
			echo -e "Google thinks you are the robot and has banned you;) So, you have to wait some time to unban or change your ip!";
			exit;
		fi

		checkdata=$(echo $query | grep -Eo "(http|https)://[a-zA-Z0-9./?=_~-]*$domain/[a-zA-Z0-9./?=_~-]*")
		if [ -z "$checkdata" ]; then
			sleep $sleeptime; # Sleep to prevent banning
			break; # Exit the loop
		else
			result+="$checkdata ";
			sleep $sleeptime; # Sleep to prevent banning
		fi
	done

		### Echo results
		if [ -z "$result" ]; then
			echo -e "${BYellow}[${resetT}${BRed}-${resetT}${BYellow}]${resetT} No results"
		else
			IFS=$'\n' sorted=($(sort -u <<<"${result[@]}" | tr " " "\n")) # Sort the results with unique key
			echo -e " "
			for each in "${sorted[@]}";
			  do echo -e "     ${BYellow}[${resetT}${BGreen}+${resetT}${BYellow}]${resetT} $each";
			done
		fi

		### Unset variables
		unset IFS sorted result checkdata checkban query
}
### Function to get information about site ### END


### Function to print the results ### START
function PrintTheResults {
	for dirtrav in $@;
		do echo -en "${BYellow}[${resetT}${BRed}*${resetT}${BYellow}]${resetT}" Checking $(echo $dirtrav | cut -d ":" -f 2 | tr '[:lower:]' '[:upper:]' | sed "s@+@ @g;s@%@\\\\x@g" | xargs -0 printf "%b") "\t"
		Query $dirtrav
	done
echo " "
}
### Function to print the results ### END

# Exploit
echo -e "${BGreen}Checking Security Misconfigurations:${resetT}"; PrintTheResults "${misconfigearray[@]}";
echo -e "${BGreen}Checking HIdden Gems:${resetT}"; PrintTheResults "${hiddenearray@]}";
echo -e "${BGreen}Checking Login Page:${resetT}"; PrintTheResults "${loginpagearray[@]}";
echo -e "${BGreen}Checking specific files:${resetT}"; PrintTheResults "${filetypesarray[@]}";
echo -e "${BGreen}Checking path traversal:${resetT}"; PrintTheResults "${dirtravarray[@]}";
