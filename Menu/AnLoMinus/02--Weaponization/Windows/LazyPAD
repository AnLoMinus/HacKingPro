#!/usr/bin/bash
tools='crackmapexec bloodhound neo4j bloodhound-python bloodhound-quickwin sprayhound ldapdomaindump jq'
workspace='LazyEnumAD'

# src: https://github.com/merlinepedra/LazyPentestingAD

# Colors
RED='\033[0;31m'
NC='\033[0m'
YELLOW='\033[0;33m'
GREEN='\033[0;32m'
BPURPLE='\033[1;35m'
BCYAN='\033[1;36m'

# Directories

mkdir -p $workspace/files
mkdir -p $workspace/Report

# Banner
function 5(){
	printf "${RED}\n"
	printf "██╗      █████╗ ███████╗██╗   ██╗    ██████╗ ███████╗███╗   ██╗████████╗███████╗███████╗████████╗     █████╗ 	██████╗    \n"
	printf "██║     ██╔══██╗╚══███╔╝╚██╗ ██╔╝    ██╔══██╗██╔════╝████╗  ██║╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝    ██╔══██╗	██╔══██╗   \n"
	printf "██║     ███████║  ███╔╝  ╚████╔╝     ██████╔╝█████╗  ██╔██╗ ██║   ██║   █████╗  ███████╗   ██║       ███████║	██║  ██║   \n"
	printf "██║     ██╔══██║ ███╔╝    ╚██╔╝      ██╔═══╝ ██╔══╝  ██║╚██╗██║   ██║   ██╔══╝  ╚════██║   ██║       ██╔══██║	██║  ██║   \n"
	printf "███████╗██║  ██║███████╗   ██║       ██║     ███████╗██║ ╚████║   ██║   ███████╗███████║   ██║       ██║  ██║██╗██████╔╝██╗\n"
	printf "╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝       ╚═╝     ╚══════╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝╚══════╝   ╚═╝       ╚═╝  ╚═╝╚═╝╚═════╝ ╚═╝\n${NC}"
	printf "                         ${BPURPLE}www.sniferl4bs.com${NC}	         				Version alpha 0.0.1 \n\n"
    usage
}

##########################################
# 	TODO: 								  #
#     - MARKDOWN REPORT - OBSIDIAN        #
#	  - EXAMPLE FUNCTION            	  #
#     - Check TOOLS installed 			  #
#     - Start neo4j, bloodhound           #
#		and import data in bloodhound     #
#     - NULL session enum 				  #
#     - ATTACK function					  #
#     - Cracking function				  #
#     - Vulnerability Check 			  #
###########################################

function crack(){
	printf "aaa \n"
}

function  attack(){
	printf "Kerberoasting \n"
	printf "ASREPRoasting \n"
}

function  report(){
   read -p "${YELLOW}It's necessary load files bloodhound-python in to Blodhound for continue and Enumeration running. Are you ready ?${NC} (y/n) " ANSWER
   if [ "$ANSWER" = "y" ];
   then
   	  # TODO:
   	  #		 1. Start neo4j
   	  #      2. Import .json files bloodhound ingestor into neo4j https://sniferl4bs.com/2022/02/reporte-de-posibles-vectores-para-comprometer-un-ad-con-bloodhound-quickwin/
   	  # 	 3. Start bloodhound interface.
   	  #bloodhound-import -du $U -dp $P $workspace/files/bloodhound/*.json
      printf " # Report Lazy Pentest Active Directory \n  ## 👤 Users in Domain \n \n" >>  $workspace/Report/Main.md
      countUsers=$(awk 'END{print NR}' < $workspace/files/users.domain)
      printf " **Users in domain**: $countUsers \n " >> $workspace/Report/Main.md
      printf " # 🐕 Bloodhound Report \n" >> $workspace/Report/Bloodhound.md
      printf "ℹ️ This information is generated with the output of tool: ***[Bloodhound QuickWin](https://github.com/kaluche/bloodhound-quickwin)*** \n" >> $workspace/Report/Bloodhound.md
      printf "⌛ ${BCYAN}Execution Blodhound QuickWin \n${NC}"
      sleep 2
      bloodhound-quickwin -u $U -p $P >> $workspace/files/bloodhound-quickwin.output
      printf "⌛ ${BCYAN}Working ...\n${NC}"
      sleep 2
      sed -i 's/\[34m//g; s/\[0m//g; s/\[93m//g; 's/#//g'; s/\[92m//g; s/\[94m//g; s/\[90m//g; s/\[\*\]/###/g; s/\x1b//g' $workspace/files/bloodhound-quickwin.output
      head -n -20 $workspace/files/bloodhound-quickwin.output >> $workspace/Report/Bloodhound.md
      printf "### Stats \n\n" >> $workspace/Report/Bloodhound.md
      printf "| Description                                | Percentage | Total | \n" >> $workspace/Report/Bloodhound.md
	  printf "| -------------------------------------------|:----------:|:-----:| \n" >> $workspace/Report/Bloodhound.md
      cat $workspace/files/bloodhound-quickwin.output | tail -n14 | tr '+-' ' ' >> $workspace/Report/Bloodhound.md
      ## LDAP RESULTS

      printf " **Users with AdminCount=1** \n" >> $workspace/Report/Main.md
      cat $workspace/files/privilegeUsers.domain >> $workspace/Report/Main.md
      printf "\n **Users Dont Expire Passwords** \n" >> $workspace/Report/Main.md
      cat $workspace/files/UsersDonExpirePasswords.domain >> $workspace/Report/Main.md
      printf "⌛ ${BCYAN}Working .....\n${NC}"
      sleep 2
      printf "## Users and Creds in SYSVOL *.xml Files \n" >> $workspace/Report/Sysvol.md
      grep 'Username\|Password\|File' $workspace/files/GPP_Password.output | cut -d "]" -f 2 >> $workspace/Report/Main.md
      grep 'Username\|Password\|File' $workspace/files/NullGPP_Password.output | cut -d "]" -f 2 >> $workspace/Report/Main.md
	  printf " \n ![[Sysvol.md]]" >> $workspace/Report/Main.md
	  printf " \n ![[Bloodhound.md]]" >> $workspace/Report/Main.md
	  printf "${BCYAN}📚 Report Completed! 🍕🍕 ¡Cowabunga! 🍕🍕 ${NC}\n"

   elif [[ "$ANSWER" = "n" ]]; then
      printf " BYE!!! "
   fi
}


function null_enumeration(){
	printf "🔥 Testing without credentials\n"
	printf "${BCYAN}ℹ️ Getting information from the domain controller\n${NC}"
	domaininformation=$(crackmapexec smb $i)
	printf "${BCYAN}Hostname:${NC} "; echo $domaininformation | awk -F ":" '{print $2}' | cut -d ")" -f 1
	printf "${BCYAN}Domain: ${NC}"; echo $domaininformation | awk -F ":" '{print $3}' | cut -d ")" -f 1
	printf "${BCYAN} Verify Creds in SYSVOL${NC}"
	Get-GPPPassword.py -no-pass '$i' >> $workspace/files/NullGPP_Password.output
	grep 'Username\|Password\|File' $workspace/files/NullPassword.output &> /dev/null
	if [ $? == 0 ]; then
	   printf "${RED}[☠️]${NC} ${GREEN}Found Credentials!!${NC}\n"
	else
	   printf "${GREEN}\n Not Found!${NC}\n"
	fi
	# Null Session https://www.thehacker.recipes/sys/movement/smb#null-session
}

function active_directory_enum(){
	printf "👤 ${BCYAN}Enumerating Users \n\n${NC}"
	users_domain
	sleep 2
	printf "🐕 ${BCYAN}Extracting information with Bloodhound.py\n\n${NC}"
	cd $workspace/files && mkdir bloodhound && cd bloodhound
	bloodhound
	unzip *.zip &> /dev/null
	cd ../../
	sleep 2
	printf "👤 ${BCYAN}LDAP Enumeration \n\n${NC}"
	ldap
	sleep 2
	printf "🔍 ${BCYAN} Searching GPP Passwords \n${NC}"
	gpp_password
	sleep 2


}

# EXECUTION TOOLS

function gpp_password(){
	Get-GPPPassword.py $d/$u:$p@$i  >> $workspace/files/GPP_Password.output
	grep 'Username\|Password\|File' $workspace/files/GPP_Password.output &> /dev/null
	if [ $? == 0 ]; then
	   printf "${RED}[☠️]${NC} ${GREEN}Found Credentials!!${NC}\n"
	else
	   printf "${GREEN}Not Found!${NC}\n"
	fi
}

function bloodhound(){
	bloodhound-python -c All,LoggedOn -d $d -u $u -p $p -ns $i --zip
	# TODO: Import data in Neo4j
}

function ldap(){

	 ldapdomaindump --user "$d\\$u" --password "$p" $i -o ldapdomaindump
	 mv ldapdomaindump/ files/.
	 cd ..
	 jq -r '.[].attributes | select(.adminCount == [1]) | .sAMAccountName[]' $workspace/files/ldapdomaindump/domain_users.json > $workspace/files/privilegeUsers.domain
	 grep DONT_EXPIRE_PASSWD $workspace/files/ldapdomaindump/domain_users.grep | grep -v ACCOUNT_DISABLED | awk -F ';' '{print $3}' > $workspace/files/UsersDonExpirePasswords.domain
}


function users_domain(){
	 crackmapexec smb $i -u $u -p $p -d $d --users | awk -F " " '{print $5}' | cut -d'\' -f2 | tail -n +5 >> $workspace/files/users.domain
}

# Configurations and Software Check

function check_tools(){
	printf "⌛ ${BCYAN}Checking required software\n\n${NC}"
	sleep 2
	for tool in $tools; do
	  printf '%-30s' "🔧 $tool"
	  if hash "$tool" 2>/dev/null; then
	    printf "✅ ${GREEN}Installed\n${NC}"
	  else
	    printf "☠️ ${RED}Missing\n${NC}"
	  fi
	done
}


# VULNERABILITY CHECK

function vulnerable(){
	printf "${BCYAN}⌛ Checking vulnerabilities in active Directory\n\n${NC}"
	printf "# Vulnerabilities Active Directory - Domain Controler \n\n" >> $workspace/Report/vulns.md
	printf "| VULNERABLE | DESCRIPTION | EXPLOIT |\n" >> $workspace/Report/vulns.md
	printf "| ---------- | ----------- | ------- |\n"  >> $workspace/Report/vulns.md
	printf "${GREEN}ZEROLOGON${NC}  -> "
	crackmapexec smb $i -u $u -p $p -d $d -M zerologon | grep VULNERABLE &> /dev/null
	if [ $? == 0 ]; then
	   printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC}\n"
	   printf "|     ☠️     |  *ZEROLOGON*    | https://github.com/dirkjanm/CVE-2020-1472 | \n" >> $workspace/Report/vulns.md
	   #printf "Exploit -> https://github.com/dirkjanm/CVE-2020-1472\n"
	else
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *ZEROLOGON*    | ------ | \n" >> $workspace/Report/vulns.md
	fi

	printf "${GREEN}noPAC${NC}      -> "
	crackmapexec smb $i -u $u -p $p -d $d -M noPac | grep VULNEABLE &> /dev/null
	if [ $? == 0 ]; then
      printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC} \n"
      printf "|     ☠️     |  *noPAC*    | https://github.com/Ridter/noPac | \n" >> $workspace/Report/vulns.md
	  #printf "Exploit -> https://github.com/Ridter/noPac\n"
	else
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *noPAC*    | ------ | \n" >> $workspace/Report/vulns.md
	fi

	printf "${GREEN}MS17-010${NC}   -> "
	nmap -p 445 --script smb-vuln-ms17-010 $i | grep -i  vulnerable &> /dev/null
	if [ $? == 0 ]; then
	  printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC} \n"
	  printf "|     ☠️     |  *MS17-010*    | Metasploit? | \n" >> $workspace/Report/vulns.md
	else
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *MS17-010*    | ------ | \n" >> $workspace/Report/vulns.md
	fi

    printf "${GREEN}PetitPotam${NC} -> "
	crackmapexec smb $i -u $u -p $p -d $d -M petitpotam | grep VULNERABLE  &> /dev/null
	if [ $? == 0 ]; then
		printf "${RED}[☠️]${NC} ${BCYAN}VULNERABLE${NC}\n"
		printf "|     ☠️     |  *PetitPotam*    | https://github.com/topotam/PetitPotam | \n" >> $workspace/Report/vulns.md
		#printf "Exploit -> https://github.com/topotam/PetitPotam\n"
	else
	   printf "${RED}[✅] ${GREEN}NO VULNERABLE${NC}\n"
	   printf "|     ✅     |  *PetitPotam*    | ------ | \n" >> $workspace/Report/vulns.md
	fi
}

# TODO: [CVE-2019-1019 |CVE-2019-1040|CVE-2019-1166|CVE-2019-1338|CVE-2020-1472]



function usage {
       printf "\n\nArguments:\n"
       printf "	-d             Domain Name.\n"
       printf "	-i             Domain Controler IP.\n"
       printf "	-u             User valid in domain.\n"
       printf "	-p             Credential user.\n"
       printf "	-w             Wordlist location.\n"
       printf "	-r             Rules location.\n"
       printf "	-h             Display this help message.\n"
   	   printf "Functions:\n"
   	   printf "	-N      	     NULL SESSION.\n"
   	   printf "	-E      	     Enumerate active Directory.\n"
   	   printf "	-V               Verify vulnerability in AD\n"
   	   printf "	-C               Password Cracking (Work in progress...) \n"
       printf " -F               Full Attack Active Directory (Work in progress...)\n"
   	   printf "	-A 	             Attack Active Directory. (Work in progress...)\n"
   	   printf " -R               Generate Report Markdown.\n"
   	   printf "	-T	           Check Tools installed in System.\n"
   	   printf "Usage:\n"
   	   printf "\n"
   	   printf "Verify Tools installed\n"
   	   printf "            LazyPAD.sh -T \n"
   	   printf "Null Session:\n"
	   printf "			   LazyPAD.sh -i <DIRECCION-IP> -N\n"
   	   printf "Enumerate Active Directory \n"
   	   printf "                       LazyPAD.sh -u <user> -p <password> -d <domain> -i <IP-DC> -E \n"
   	   printf "Vulnerability Active Directory  \n"
       printf "                LazyPAD.sh -u <user> -p <password> -d <domain> -i <IP DC> -V \n"
   	   printf "Generate Report\n"
   	   printf " LazyPAD.sh -U <NEO4J-USER> -P <NEO4J-PASSWORD> -R			   \n"
   	   printf " \n"

   	   printf "\nDefault all data saved in Folder LazyEnumAD"
       exit 0
}
[ $# = 0 ] && banner "  >>>>>>>> no options"

while getopts ":d:i:u:p:U:P:NEVCFART" o; do
    case "${o}" in
    	d)
			d=${OPTARG}
			;;
    	i)
			i=${OPTARG}
			;;
        u)
            u=${OPTARG}
            ;;
        p)
            p=${OPTARG}
            ;;
        U)
            U=${OPTARG}
            ;;
        P)
            P=${OPTARG}
            ;;
        N)
            null_enumeration
            ;;
        E)
            active_directory_enum
            ;;
        V)
            vulnerable
            ;;
        T)
            check_tools
            ;;
        F)

            ;;
        A)

            ;;
        R)
            report
            ;;
        *)
            banner
            ;;
    esac
done
if [ $OPTIND -eq 1 ];
	then
		echo "Missing arguments";
	fi
shift $((OPTIND-1))



#
# link symbolic
# ln -s /opt/tools/bloodhound-quickwin/bhqc.py /usr/bin/bloodhound-quickwin
#
#
