#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################
# Name : Anlominus ~ WinPrivEsc
# Description : WinPrivEsc ~ Windows Privilege Escalation
# Created Date : 2022 July
# [ Last UPDATE ] ──╼ [ 25-07-2022 ]
# Aouther: Anlominus ~> RhytMix ~> WinKingPro
# Skils: Best Copywriter IN the COSMOS!
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE GREAT SCRIPTS
# CREDIT: To All World Creators free Scripts & Tools
# Location: Made With LOVE IN ISRAEL !
# Source: https://github.com/Anlominus/WinPrivEsc
###############################################
LastUPDATE="2022 July 25"
ToolSource="https://github.com/AnLoMinus/WinKingPro"
###############################################
# ▪ System Information
# ▪ Users Information
# ▪ Services Information
# ▪ Applications Information
# ▪ Network Information
# ▪ Windows Credentials
# ▪ Browser Information
# ▪ Events Information
# ▪ Additional Checks
# ▪

###############################################
# Text Attributes
###############################################

# Reset text formatting and colors.
resetT="\033[m"
# Bold text
boldT="\033[1m"
# Faint text.
faintT="\033[2m"
# Italic text.
italicT="\033[3m"
# Underline text.
underT="\033[4m"
# Slow blink.
slowBlink="\033[5m"
# Swap foreground and background colors.
swapFandBC="\033[7m"
# Hidden text.
hidden="\033[8m"
# Strike-through text.
strikeThroughT="\033[9m"

WinKingProColors(){
##############################################################################
# COLORS AND BACKGROUNDS
##############################################################################
Color_Off='\033[0m' # Text Reset
ORANGE='\033[1;38;5;202m'

# Regular Colors
Black='\033[0;30m'  # Black
Red='\033[0;31m'    # Red
Green='\033[0;32m'  # Green
Yellow='\033[0;33m' # Yellow
Blue='\033[0;34m'   # Blue
Purple='\033[0;35m' # Purple
Cyan='\033[0;36m'   # Cyan
White='\033[0;97m'  # White

# Additional colors
LGrey='\033[0;37m'   # Ligth Gray
DGrey='\033[0;90m'   # Dark Gray
LRed='\033[0;91m'    # Ligth Red
LGreen='\033[0;92m'  # Ligth Green
LYellow='\033[0;93m' # Ligth Yellow
LBlue='\033[0;94m'   # Ligth Blue
LPurple='\033[0;95m' # Light Purple
LCyan='\033[0;96m'   # Ligth Cyan


# Bold
BBlack='\033[1;30m'  # Black
BRed='\033[1;31m'    # Red
BGreen='\033[1;32m'  # Green
BYellow='\033[1;33m' # Yellow
BBlue='\033[1;34m'   # Blue
BPurple='\033[1;35m' # Purple
BCyan='\033[1;36m'   # Cyan
BWhite='\033[1;37m'  # White

# Underline
UBlack='\033[4;30m'  # Black
URed='\033[4;31m'    # Red
UGreen='\033[4;32m'  # Green
UYellow='\033[4;33m' # Yellow
UBlue='\033[4;34m'   # Blue
UPurple='\033[4;35m' # Purple
UCyan='\033[4;36m'   # Cyan
UWhite='\033[4;37m'  # White

# Background
On_Black='\033[40m'  # Black
On_Red='\033[41m'    # Red
On_Green='\033[42m'  # Green
On_Yellow='\033[43m' # Yellow
On_Blue='\033[44m'   # Blue
On_Purple='\033[45m' # Purple
On_Cyan='\033[46m'   # Cyan
On_White='\033[47m'  # White
}
WinKingProColors

###############################################
#         Parsing Date and Time
###############################################

year=$(date +%Y)
month=$(date +%m)
day=$(date +%d)
hour=$(date +%H)
minute=$(date +%M)
second=$(date +%S)
CurrentDate=$(echo "${DGrey}$day-$month-$year")
StartingTime=$(echo "${DGrey}$hour:$minute:$second")
FullTime=$(date)

###############################################
#         WinKingPro Design Variables
###############################################

WinKingPro=$(echo "${BRed}Win${BYellow}King${BBlue}Pro$resetT")
Anlominus=$(echo "${BGreen}An${DGrey}Lo${BRed}Minus")
MyVersion=$(echo "${DGrey}V0.0.0.${BWhite}1")
WinKingProDavid=$(echo "\n\t  ${BRed}[${BCyan}✡${BRed}] ${WinKingPro} ${BRed}[${BCyan}✡${BRed}]\n\t\t ${BGreen}")
WinKingProExit=$(echo "\n ${BRed}[${BCyan}✡${BRed}] ${BCyan}Exit ${WinKingPro} ${BRed}[${BCyan}✡${BRed}]\n\t\t ${BGreen}")
Press_ENTER=$(echo "\n\n${BYellow}                🔶    Press ENTER    🔶     ${BGreen}\n\n")
Press_Enter_To_START=$(echo "\n\n${BYellow}                🔶    Press Enter To START    🔶     ${BGreen}\n\n")
InvalidOption=$(echo "\n\t\t ${BGreen}»»» ${WinKingPro} ${LRed}Invalid Option ${BRed}¯\_(ツ)_/¯ \n")

###############################################
#         HacKingPro Planning
###############################################

# Read Target Name From the User
ReadTargetNameFromtheUser(){
  # Read Target Name From the User
  # This Variable is for Case Name.
  t0="$(echo "\n          ${BBlue}┌──[ 🎯 ]──[${BRed} Name ${BBlue}]──╼  ")"
  read -p "$t0" targetNAME
  if [ -z "$targetNAME" ]; then
    #statements
    targetNAME="AnLoMinus"
    # echo "\n\t  ${BRed}[${LGrey}TN${BRed}]${BBlue} - ${LGrey}Target Name ${BBlue} $targetNAME\n"
  fi

  # Checking if Case Folder Exist

}

# Define Variables For Case Directory
MainDirectoriyCase="${MainDirectoriy}/Case"

# Read Target Name From the User
ReadTargetNameFromtheUser(){
  # Read Target Name From the User
  # This Variable is for Case Name.
  t0="$(echo "\n          ${BBlue}┌──[ 🎯 ]──[${BRed} Name ${BBlue}]──╼  ")"
  read -p "$t0" targetNAME
  if [ -z "$targetNAME" ]; then
    #statements
    targetNAME="AnLoMinus"
    # echo "\n\t  ${BRed}[${LGrey}TN${BRed}]${BBlue} - ${LGrey}Target Name ${BBlue} $targetNAME\n"
  fi
}

# Read Target IP From the User
ReadTargetIPFromtheUser(){
# Read Target URL / Domain / Dns / Server From the User
# This Variable is for AttacKing ~> IP Addresses .
t1="$(echo "\n          ${BBlue}|──[ 🎯 ]──[${BRed} IP ${BBlue}]──╼  ")"
read -p "$t1" targetIP
if [ -z "$targetIP" ]; then
  #statements
  targetIP="127.0.0.1"
  # targetIP=" "
  echo "> - ### Target IP: ${targetIP}" >> ${targetNAME}-HacKingPro-Planning-Log.md
fi
}

# Read Target URL From the User
ReadTargetURLFromtheUser(){
# Read Target URL / Domain / Dns / Server From the User
# This Variable is for OSINT and AttacKing ~> URL / Domain / Dns / Server/ Websites .
t2="$(echo "\n          ${BBlue}|──[ 🎯 ]──[${BRed} URL ${BBlue}]──╼  ")"
read -p "$t2" targetDns
if [ -z "$targetDns" ]; then
  #statements
  targetDns="xXx.AnLoMinus.xXx"
  echo "> - ### Target Dns: ${targetDns}" >> ${targetNAME}-HacKingPro-Planning-Log.md
fi
}

# Read Target Email From the User
ReadTargetEmailFromtheUser(){

# This Variable is for OSINT and AttacKing ~> Emails .
t3="$(echo "\n          ${BBlue}|──[ 🎯 ]──[${BRed} Email ${BBlue}]──╼  ")"
read -p "$t3" targetEmail
if [ -z $targetEmail ]; then
  #statements
  targetEmail="Change.Me@Do.Now"
  # echo "\n${BRed}[${LGrey}TE${BRed}]${BBlue} - ${LGrey}Target Email ${BBlue} $targetEmail\n"
  echo "> - ### Target Email: ${targetEmail}" >> ${targetNAME}-HacKingPro-Planning-Log.md
fi
}

# Read Target Phone From the User
ReadTargetPhoneFromtheUser(){

# This Variable is for OSINT and AttacKing ~> Phones Numbers .
t4="$(echo "\n          ${BBlue}└──[ 🎯 ]──[${BRed} Phone (With Country Code) ${BBlue}]──╼  ")"
read -p "$t4" targetPhone
if [ -z "$targetPhone" ]; then
  #statements
  targetPhone="9720506933037"
  # echo "\n${BRed}[${LGrey}TP${BRed}]${BBlue} - ${LGrey}Target Phone ${BBlue} $targetPhone\n"
fi
echo "> - ### Target Phone: ${targetPhone}" >> ${targetNAME}-HacKingPro-Planning-Log.md
}

# Planning and Scoping
HacKingProPlanning(){
  clear
  # HacKingProLogo1
  cd "$MainDirectoriy"
  # Menu
  HacKingProTargetStatus=$(echo "
    ${ToolHeader}

    ${DGrey}┌──${BRed}[${DGrey} P ${BRed}]${BGreen}──╼ ${BRed}[${DGrey} ⚡️ Planning and Scoping 🎯 ${BRed}]
    ${DGrey}|
    ${DGrey}|──${BRed}[${DGrey} Full Time ${BRed}]${BGreen}──╼ ${BRed}[${DGrey} $(date) ${BRed}]
    ${DGrey}|──${BRed}[${DGrey} Current Date ${BRed}]${BGreen}──╼ ${BRed}[${DGrey} ${CurrentDate} ${BRed}]
    ${DGrey}|──${BRed}[${DGrey} Starting Time ${BRed}]${BGreen}──╼ ${BRed}[${DGrey} ${StartingTime} ${BRed}]
    ${DGrey}|
    ${DGrey}|──${BRed}[ 🎯 ]${DGrey}──${BRed}[${DGrey}$(FunTargetIP)${BRed}]${DGrey}──╼  ${LRed}IP${BBlue}: ${BGreen}${targetIP}
    ${DGrey}|──${BRed}[ 🎯 ]${DGrey}──${BRed}[${DGrey}$(FunTargetDns)${BRed}]${DGrey}──╼  ${LRed}Dns${BBlue}: ${BGreen}${targetDns}
    ${DGrey}|──${BRed}[ 🎯 ]${DGrey}──${BRed}[${DGrey}$(FunTargetName)${BRed}]${DGrey}──╼  ${LRed}Name${BBlue}: ${BGreen}${targetNAME}
    ${DGrey}|──${BRed}[ 🎯 ]${DGrey}──${BRed}[${DGrey}$(FunTargetEmail)${BRed}]${DGrey}──╼  ${LRed}Email${BBlue}: ${BGreen}${targetEmail}
    ${DGrey}|──${BRed}[ 🎯 ]${DGrey}──${BRed}[${DGrey}$(FunTargetPhone)${BRed}]${DGrey}──╼  ${LRed}Phone${BBlue}: ${BGreen}${targetPhone}
    ${DGrey}|
    ${DGrey}└──${BRed}[${DGrey} I ${BRed}]${BGreen}──╼ ${BRed}[${DGrey} Install HacKingPro On the System ${BRed}] ")
  echo "$HacKingProTargetStatus"

  echo "\n          ${BRed}======================================================================================="
  CheckingifCaseFolderExist

  XHacKingProCaseTargetName="$XHacKingPro/Case/$targetNAME"


  # Recommended Open With `Atom` Editor For Normal View.
  echo "# Recommended Open With [Atom]() or [Obsidian]() Editor For Normal View." >> ${targetNAME}-HacKingPro-Planning-Log.md
  echo "### $targetNAME Case Date: $(date)" >> ${targetNAME}-HacKingPro-Planning-Log.md
  echo "> - ### Target Name: ${targetNAME}" >> ${targetNAME}-HacKingPro-Planning-Log.md

  ReadTargetIPFromtheUser
  ReadTargetURLFromtheUser
  ReadTargetEmailFromtheUser
  ReadTargetPhoneFromtheUser

  #
  echo "\n          ${BRed}======================================================================================="
  echo "\n          ${BRed}[${BYellow}🔸${BRed}]${BBlue} - ${BYellow}Listing Case \n"
  echo "          ${BYellow} Log Directory ${BRed}[${BGreen} $(pwd) ${BRed}]\n${BGreen}"
  echo "          ${BYellow} Log File ${BRed}[${BGreen} $(ls) ${BRed}]\n${BGreen}"
  read -p "$Press_ENTER"
  cd "$MainDirectoriyCase"
  cd "$targetNAME"

}

# Planning Status
FunTargetDns(){
  #statements
  if [ -z ${targetDns} ]; then
    TargetDnsStatusOFF=" ❌ "
    echo "${TargetDnsStatusOFF}"
  else
    targetDnsStatusON=" ✅ "
    echo "${targetDnsStatusON}"
  fi
}
FunTargetIP(){
  #statements
  if [ -z ${targetIP} ]; then
    TargetIpStatusOFF=" ❌ "
    echo "${TargetIpStatusOFF}"
  else
    TargetIpStatusON=" ✅ "
    echo "${TargetIpStatusON}"
  fi
}
FunTargetName(){
  #statements
  if [ -z ${targetNAME} ]; then
    TargetNameStatusOFF=" ❌ "
    echo "${TargetNameStatusOFF}"
  else
    TargetNameStatusON=" ✅ "
    echo "${TargetNameStatusON}"
  fi
}
FunTargetEmail(){
  #statements
  if [ -z ${targetEmail} ]; then
    TargetEmailStatusOFF=" ❌ "
    echo "${TargetEmailStatusOFF}"
  else
    TargetEmailStatusON=" ✅ "
    echo "${TargetEmailStatusON}"
  fi
}
FunTargetPhone(){
      #statements
      if [ -z ${targetPhone} ]; then
        TargetPhoneStatusOFF=" ❌ "
        echo "${TargetPhoneStatusOFF}"
      else
        TargetPhoneStatusON=" ✅ "
        echo "${TargetPhoneStatusON}"
      fi
    }

###############################################
#         Target Status
###############################################

TargetStatusRun(){
  ToolStatus=$(echo "
    ${BCyan}${faintT}┌──${resetT}${BRed}[${DGrey} P ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} ⚡️ Planning and Scoping 🎯 ${BRed}]
    ${BCyan}${faintT}|
    ${BCyan}${faintT}|──${resetT}${BRed}[${DGrey} Full Time ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} $(date) ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${DGrey} Current Date ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} ${CurrentDate} ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${DGrey} Starting Time ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} ${StartingTime} ${BRed}]
    ${BCyan}${faintT}|
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetIP)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}IP${BBlue}: ${BGreen}${targetIP}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetDns)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Dns${BBlue}: ${BGreen}${targetDns}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetName)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Name${BBlue}: ${BGreen}${targetNAME}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetEmail)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Email${BBlue}: ${BGreen}${targetEmail}
    ${BCyan}${faintT}|──${resetT}${BRed}[ 🎯 ]${BCyan}${faintT}──${resetT}${BRed}[${DGrey}$(FunTargetPhone)${BRed}]${BCyan}${faintT}──╼  ${LRed}${faintT}Phone${BBlue}: ${BGreen}${targetPhone}
    ${BCyan}${faintT}|
    ${BCyan}${faintT}└──${resetT}${BRed}[${DGrey} I ${BRed}]${faintT}${BCyan}──╼${resetT} ${BRed}[${DGrey} Install WinKingPro On the System ${BRed}]")
    echo "$ToolStatus"
}

###############################################
#         Header
###############################################

ToolHeaderRun(){
  ToolHeader=$(echo "
    ${BCyan}${faintT}┌──${resetT}${BRed}[${BCyan}${faintT} Version${resetT} ${BRed}]${BCyan}${faintT}──────╼${resetT} ${BRed}[${BCyan} ${MyVersion} ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${BCyan}${faintT} Aouther${resetT} ${BRed}]${BCyan}${faintT}──────╼${resetT} ${BRed}[${BCyan} ${Anlominus} ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${BCyan}${faintT} Tool Name${resetT} ${BRed}]${BCyan}${faintT}────╼${resetT} ${BRed}[${BCyan} $boldT$slowBlink${WinKingPro}$resetT ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${BCyan}${faintT} Last Update${resetT} ${BRed}]${BCyan}${faintT}──╼${resetT} ${BRed}[${BCyan} ${LastUPDATE} ${BRed}]
    ${BCyan}${faintT}|──${resetT}${BRed}[${BCyan}${faintT} Current PID${resetT} ${BRed}]${BCyan}${faintT}──╼${resetT} ${BRed}[${BCyan} $currentPID ${BRed}]
    ${BCyan}${faintT}└──${resetT}${BRed}[${BCyan}${faintT} Source${resetT} ${BRed}]${BCyan}${faintT}───────╼${resetT} ${BRed}[${DGrey} ${ToolSource} ${BRed}]")
    echo "$ToolHeader"
}

MainMenu(){
  while true; do
    clear
    cd "$XWinKingPro"
    ToolHeaderRun
    TargetStatusRun
WinKingProMenuMain=$(echo "
    ${BCyan}${faintT}┌─┲╼ ${resetT}${BRed}[${LCyan} Windows Privilege Escalation Vectors ${BRed}]
    ${BCyan}${faintT}| ┖─╼ ${resetT}${BRed}[${BCyan} Following information are considered as critical Information of Windows System:${BRed}]
    ${BCyan}${faintT}|
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 01 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} The version of the operating system ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 02 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Any Vulnerable package installed or running ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 03 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Files and Folders with Full Control or Modify Access ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 04 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Mapped Drives ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 05 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Potentially Interesting Files ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 06 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Unquoted Service Paths ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 07 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Network Information (interfaces, arp, netstat) ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 08 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Firewall Status and Rules ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 09 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Running Processes ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 10 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} AlwaysInstallElevated Registry Key Check ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 11 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Stored Credentials ${BRed}]${BCyan}
    ${BCyan}${faintT}|───╼ ${resetT}${BRed}[${ORANGE} 12 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} DLL Hijacking ${BRed}]${BCyan}
    ${BCyan}${faintT}└───╼ ${resetT}${BRed}[${ORANGE} 13 ${BRed}]${BCyan}${faintT}───╼ ${resetT}${BRed}[${ORANGE} Scheduled Tasks ${BRed}]${BCyan}

    ${BGreen}┌──${BRed}[${BCyan} Arsenal ${BRed}]${BGreen}──╼ ${BRed}[${BCyan} Cheat Sheets ${BRed}]${BGreen}──╼ ${BRed}[${BGreen} Command ${BRed}]${BGreen}──╼ ${BRed}[${LGreen} $ArsenalCommand ${BRed}]
    ${BGreen}|
    ${BGreen}|──${BRed}[${DGrey} ~$(pwd) ${BRed}]
    ${BGreen}|
    ${BGreen}└──${BRed}[${BYellow} $Anlominus ${BRed}]${BGreen}──╼ ${BRed}[${BGreen} ${WinKingPro} ${BRed}]${BGreen}──╼ ${BRed}[${BGreen} 🔮 ${BRed}]${BGreen}──╼ ${BGreen}  ")

    read -p "$WinKingProMenuMain" cmd
    case $cmd in
      p|P )
      HacKingProPlanning
      ;;
      about|About )
      about
      ;;
      x|X|exit|quit|Exit )
      clear
      cd ${XWinKingPro}
      WinKingPro=$(echo "${BRed}Hac${BYellow}King${BBlue}Pro")
      echo "\n\t\t ${BRed}[🙏🏼${BRed}] ${BWhite}Exit ${WinKingPro} ${BRed}[🙏🏼${BRed}]\n\t\t ${BGreen}"
      break
      ;;
      * )
      echo "$InvalidOption"
      ;;
    esac
  done
}
MainMenu
