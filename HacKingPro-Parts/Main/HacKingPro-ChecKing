#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################################
#-Info--------------------------------------------------------#
#    Enter Your Target, Hack Him, and Get Markdown Report     #
#-About-------------------------------------------------------#
#--‚ïº‚ñ∞[ Skils ]-‚ïº‚ñ∞[ MultiMan ]                                 #
#--‚ïº‚ñ∞[ Part of ]-‚ïº‚ñ∞[ HacKingPro ]                             #
#--‚ïº‚ñ∞[ Script Name ]-‚ïº‚ñ∞[ HacKingPro-ChecKing ]                #
#--‚ïº‚ñ∞[ Author ]-‚ïº‚ñ∞[ AnLoMinus ]-‚ïº‚ñ∞[ Leon Yaakobov ]           #
###############################################################
# CREDIT: To All World Creators free Scripts & Tools          #
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE          #
# GREAT SCRIPTS                                               #
# Location: Made With LOVE IN ISRAEL !                        #
###############################################################
#-Metadata----------------------------------------------------#
#--‚ïº‚ñ∞[ Version ]-‚ïº‚ñ∞[ 1.0.0 ]                                  #
#--‚ïº‚ñ∞[ Source ]-‚ïº‚ñ∞[ https://github.com/AnLoMinus/HacKingPro ] #
#‚ïº‚ñ∞[ Created ]-‚ïº‚ñ∞[ 15-08-2022 ]-‚ïº‚ñ∞[ Update ]-‚ïº‚ñ∞[ 20-08-2022 ] #
###############################################################

#####################################
#------‚ïº‚ïº‚ñ∞[ ChecKing ]--‚ïº‚ñ∞ [ Head ] #
#####################################
#--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ System ]
Check_System(){
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ System ]--‚ïº‚ñ∞ [ Architecture ]
  case `dpkg --print-architecture` in
    darwin-amd64)
    SystemArchitecture="darwin-amd64" ;;
    aarch64)
    SystemArchitecture="arm64" ;;
    arm)
    SystemArchitecture="arm" ;;
    armhf)
    SystemArchitecture="armhf" ;;
    amd64)
    SystemArchitecture="amd64" ;;
    i*86)
    SystemArchitecture="i386" ;;
    x86_64)
    SystemArchitecture="amd64" ;;
    *)
    echo "Architecture Not Found"
    SystemArchitecture=" " ;;
  esac

  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ System ]--‚ïº‚ñ∞ [ Package Manager ]
  echo "\n"
  if [ -e /data/data/com.termux/files/usr/bin/pkg ]; then
    MyPackManager="pkg"
    MySystem="Termux"
  elif [ $(command -v apk) ]; then
    MyPackManager="apk"
      MySystem="Android"
  elif [ $(command -v brew) ]; then
    MyPackManager="brew"
    MySystem="MacOS"
    sudo=""
  elif [ $(command -v apt-get) ]; then
    MyPackManager="apt-get"
    MySystem="Linux"
  elif [ $(command -v apt) ]; then
    MyPackManager="apt"
    MySystem="Linux"
  elif [ $(command -v yum) ]; then
    MyPackManager="yum"
    MySystem="Fedora"
  fi

  echo "    ${BCyan}${faintT}‚îå‚îÄ‚îÄ${resetT}${BRed}[${DGrey} System ${BRed}]${faintT}${BCyan}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïº${resetT} ${BRed}[${DGrey} ${MySystem} ${BRed}]"

  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ System ]--‚ïº‚ñ∞ [ root Access ]
  if [ $(command -v sudo) ]; then
    sudo="sudo"
  else
    sudo=""
  fi

  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ System ]--‚ïº‚ñ∞ [ Home Dir ]
  if [ -d $HOME ]; then
    home=$HOME
  else
    home="~/"
  fi
  echo "    ${BCyan}${faintT}|‚îÄ‚îÄ${resetT}${BRed}[${DGrey} Pack Manager ${BRed}]${faintT}${BCyan}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïº${resetT} ${BRed}[${DGrey} ${MyPackManager} ${BRed}]"
  echo "    ${BCyan}${faintT}|‚îÄ‚îÄ${resetT}${BRed}[${DGrey} Home dir ${BRed}]${faintT}${BCyan}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïº${resetT} ${BRed}[${DGrey} ${home} ${BRed}]"

  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ System ]--‚ïº‚ñ∞ [ Bin Dir ]
  if [ -d /data/data/com.termux/files/usr/bin ]; then
    MyBinDirectory="/data/data/com.termux/files/usr/bin"
  elif [ -d /usr/local/bin ]; then
    MyBinDirectory="/usr/local/bin"
  elif [ -d /bin ]; then
    MyBinDirectory="/bin"
  elif [ -d /sbin ]; then
    MyBinDirectory="/sbin"
  fi
  echo "    ${BCyan}${faintT}‚îî‚îÄ‚îÄ${resetT}${BRed}[${DGrey} Bin Directory ${BRed}]${faintT}${BCyan}‚îÄ‚îÄ‚îÄ‚îÄ‚ïº${resetT} ${BRed}[${DGrey} ${MyBinDirectory} ${BRed}]"
  # cp $0 ${bin}

}
#--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ If ]--‚ïº‚ñ∞ [  Program Exist ]
CheckThatPro(){
  if [ -z $1 ]; then
    echo "\n"
    echo "    ${LRed}|‚îÄ‚îÄ‚ïº${BRed}[${slowBlink} ‚ùå ${resetT}${BRed}]${LRed}‚îÄ‚îÄ‚ïº‚ñ∞ ${BRed}[${LRed} Please Set Something To Find ${BRed}]"
    echo "\n"
  else
    which $1 > /dev/null 2>&1;
    if [ $? = 0 ]; then
      ToolPath=$(which $1)
      echo "    ${BCyan}${faintT}|‚îÄ‚îÄ‚ïº${resetT}${BRed}[ ‚úÖ ]${BCyan}${faintT}‚îÄ‚îÄ‚ïº${resetT}${LGreen}‚ïº‚ñ∞ ${LCyan}[${ORANGE} ${1} ${LCyan}]${BCyan}${faintT}‚îÄ‚îÄ‚ïº${resetT}${LGreen}‚ïº‚ñ∞ ${BRed}[${BCyan} ${ToolPath} ${BRed}]"
    else
      echo "    ${BCyan}${faintT}|‚îÄ‚îÄ‚ïº${resetT}${BRed}[ ${slowBlink}‚ùå${resetT}${BRed} ]${BCyan}${faintT}‚îÄ‚îÄ‚ïº${resetT}${LRed}‚ïº‚ñ∞ ${BWhite}[ ${1} ]${BCyan}${faintT}‚îÄ‚îÄ‚ïº${resetT}${LRed}‚ïº‚ñ∞ ${BRed}[ Sorry ${BRed}Not Found! ${BRed}]"
      AwesomeInstallPro ${1}
    fi
  fi
}
#--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]
CheckRequiredPro(){
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Main Menu ]
  AwesomeLine "üî∂ ${HacKingPro} ChecKing Required Programs üî∂"
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ System Packs ]
  CheckRequired_SystemPack(){
    AwesomeLine "System Packs"
    MiniHeaderSta "System Pack"
    CheckThatPro ps
    CheckThatPro sh
    CheckThatPro su
    CheckThatPro top
    CheckThatPro git
    CheckThatPro zsh
    CheckThatPro apt
    CheckThatPro pip
    CheckThatPro pip2
    CheckThatPro pip3
    CheckThatPro sudo
    CheckThatPro bash
    CheckThatPro less
    CheckThatPro last
    CheckThatPro host
    CheckThatPro ping
    CheckThatPro open
    CheckThatPro dpkg
    CheckThatPro wget
    CheckThatPro whoami
    CheckThatPro figlet
    CheckThatPro python
    CheckThatPro python2
    CheckThatPro python3
    CheckThatPro apktool
    CheckThatPro tcpdump
    CheckThatPro netstat
    CheckThatPro openvpn
    CheckThatPro ifconfig
    CheckThatPro ipconfig
    CheckThatPro macchanger
    CheckThatPro enum4linux¬†
    MiniHeaderEnd "System Pack"
    Press_ENTER
  }
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Anonimity ]
  CheckRequired_Anonimity(){
    AwesomeLine "Anonimity"
    MiniHeaderSta "Anonimity "
    CheckThatPro i2p
    CheckThatPro tor
    MiniHeaderEnd "Anonimity"
    Press_ENTER
  }
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Reconnaissance & Information Gathering ]
  CheckRequired_Reconnaissance__Information_Gathering(){
    AwesomeLine "Reconnaissance & Information Gathering"
    MiniHeaderSta "Reconnaissance & Information Gathering "
    CheckThatPro ip
    CheckThatPro who
    CheckThatPro dig
    CheckThatPro arp
    CheckThatPro curl
    CheckThatPro nmap
    CheckThatPro dirb
    CheckThatPro amass
    CheckThatPro whois
    CheckThatPro nikto
    CheckThatPro wfuzz
    CheckThatPro tshark
    CheckThatPro kismet
    CheckThatPro dnsmap
    CheckThatPro sslyze
    CheckThatPro wpscan
    CheckThatPro dnswalk
    CheckThatPro dnsenum
    CheckThatPro whatweb
    CheckThatPro openvas
    CheckThatPro sslscan
    CheckThatPro arpspoof
    CheckThatPro joomscan
    CheckThatPro etherape
    CheckThatPro gobuster
    CheckThatPro nslookup
    CheckThatPro dnsrecon
    CheckThatPro beef-xss
    CheckThatPro SubFinder
    CheckThatPro Sublist3r
    CheckThatPro smbclient
    CheckThatPro wireshark
    CheckThatPro traceroute
    CheckThatPro metagoofil
    CheckThatPro netdiscover
    CheckThatPro theharvester
    MiniHeaderEnd "Reconnaissance & Information Gathering "
    Press_ENTER
  }
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Delivery ]
  CheckRequired_Delivery(){
    AwesomeLine "Delivery"
    MiniHeaderSta "Delivery "
    CheckThatPro ssh
    CheckThatPro ftp
    MiniHeaderEnd "Delivery "
    Press_ENTER
    }
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Exploitation ]
  CheckRequired_Exploitation(){
    AwesomeLine "Exploitation"
    MiniHeaderSta "Exploitation "
    CheckThatPro nc
    CheckThatPro rlwrap
    CheckThatPro sqlmap
    MiniHeaderSta "Metasploit Framework"
    CheckThatPro msfd
    CheckThatPro msfdb
    CheckThatPro msfrpc
    CheckThatPro msfvenom
    CheckThatPro msfconsole
    MiniHeaderEnd "Metasploit Framework"
    MiniHeaderEnd "Exploitation "
    Press_ENTER
  }
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ WiFi HacKing ]
  CheckRequired_WiFi_HacKing(){
    AwesomeLine "WiFi HacKing"
    MiniHeaderSta "WiFi HacKing"
    CheckThatPro wifite
    CheckThatPro airmon-ng
    CheckThatPro airbase-ng
    CheckThatPro aircrack-ng
    CheckThatPro airodump-ng
    CheckThatPro aireplay-ng
    CheckThatPro airdecap-ng
    CheckThatPro airdecloak-ng
    MiniHeaderEnd "WiFi HacKing"
    Press_ENTER
  }
  #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Main Menu ]
  while  true; do
    #statements
    ToolHeaderRun
    echo "
    #-[1]-‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ System Packs ]
    #-[2]-‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Anonimity ]
    #-[3]-‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Reconnaissance & Information Gathering ]
    #-[4]-‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Delivery ]
    #-[5]-‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Exploitation ]
    #-[6]-‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ WiFi HacKing ]
    "
    read cCC
    case $cmd in
      1 )
      #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ System Packs ]
      CheckRequired_SystemPack
      ;;
      2 )
      #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Anonimity ]
      CheckRequired_Anonimity
      ;;
      3 )
      #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Reconnaissance & Information Gathering ]
      CheckRequired_Reconnaissance__Information_Gathering
      ;;
      4 )
      #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Delivery ]
      CheckRequired_Delivery
      ;;
      5 )
      #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ Exploitation ]
      CheckRequired_Exploitation
      ;;
      6 )
      #--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ Required Programs ]--‚ïº‚ñ∞ [ WiFi HacKing ]
      CheckRequired_WiFi_HacKing
      ;;
      x|X|exit|quit|Exit )
      cd ${MainDirectoriy}
      AwesomeLineExit
      break
      ;;
    esac
  done
  AwesomeLine "‚úÖ ${HacKingPro} ChecKing Required Programs ‚úÖ"
}
#--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ If ]--‚ïº‚ñ∞ [  Case Folder Exist ]
CheckingifCaseFolderExist(){
  #statements
  if [ -d Case ]; then
    echo "\n          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚úÖ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BGreen}Case ${BYellow}Folder Exists, Continue to it\n"
    cd Case
    if [ -d $targetNAME ]; then
      #statements
      echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚úÖ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BGreen}$targetNAME ${BYellow}Folder Exists, Continue to it\n"
      cd ${targetNAME}
    else
      echo "\n          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚ùå ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BGreen}${targetNAME} ${BYellow}Folder Not Exists, Creating it\n"
      mkdir ${targetNAME}
      cd ${targetNAME}
    fi

    if [ -d Planning ]; then
      #statements
      echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚úÖ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BGreen}$targetNAME/Planning ${BYellow}Folder Exists, Continue to it\n"
      cd Planning
    else
      echo "\n          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚ùå ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BGreen}Planning ${BYellow}Folder Not Exists, Creating it\n"
      mkdir Planning
      cd Planning
    fi
  else
    echo "\n          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚ùå ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BGreen}Case ${BYellow}Folder Not Exists, Creating it\n"
    echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚úÖ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BYellow}Creating ${BGreen}Case ${BYellow}Folder and Continue to it\n"
    mkdir Case
    cd Case
    echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚úÖ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BYellow}Creating ${BGreen}$targetNAME ${BYellow}and Continue to it\n"
    mkdir $targetNAME
    cd $targetNAME
    echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚úÖ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº ${BYellow}Creating ${BGreen}Case Planning ${BYellow}and Continue to it\n"
    mkdir Planning
    cd Planning
  fi

  if [ -e ${Planning_File} ]; then
    t5="$(echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚ùå ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº${BGreen} $Planning_File ${BGreen} ${BYellow}Exist! ${LRed}Remove it? ${BCyan}[yY/nN]: ")"
    read -p "$t5 " filexist
    case $filexist in
      y|Y)
      cd "$MainDirectoriyCaseName/Planning"
      echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ üî∂ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº${BGreen}  Removing {${Planning_File}} file .."
      Press_ENTER
      rm ${Planning_File}
      echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ ‚ùå ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº${BGreen} ‚úÖ Removed {${Planning_File}} file .."
      cd "$MainDirectoriyCaseName"
      ;;
      n|N)
      echo "          ${BBlue}|‚îÄ‚îÄ‚îÄ‚îÄ${BRed}[ üî∂ ${BRed}]${BBlue}‚îÄ‚îÄ‚ïº${BGreen} Leaving {${Planning_File}} file .."
      ;;
    esac
  fi

}
#--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ If ]--‚ïº‚ñ∞ [ Internet Connection Exist ]
CheckInternetConnection(){
  ping -c 1 google.com > /dev/null 2>&1
  if [ "$?" == 0 ]; then
    InternetStatus="\n    ${DGrey}[‚úÖ${DGrey}]${BYellow}${faintT}‚îÄ‚îÄ‚ïº${resetT}${LGreen}‚ñ∞‚ñ∞‚ñ∞  ${resetT}${DGrey}[${LGrey} Internet ${DGrey}]${BYellow}${faintT}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïº${resetT}${LGreen}‚ñ∞‚ñ∞‚ñ∞ ${DGrey}[${BGreen}${slowBlink} True ${resetT}${DGrey}] \n"
    echo "${InternetStatus}"
    if [ ! -z "$targetDns" ]; then
      #statements
      GetIP="$(ping -c 1 "${targetDns}" | grep ttl | cut -d " " -f4 |  tr  -d :)"
      targetIP="${GetIP}"
    fi
    clear

  else
    InternetStatus="\n    ${DGrey}[‚ùå${DGrey}]${BYellow}${faintT}‚îÄ‚îÄ‚ïº${resetT}${LRed}‚ñ∞‚ñ∞‚ñ∞  ${resetT}${DGrey}[${LGrey} Internet ${DGrey}]${BYellow}${faintT}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïº${resetT}${LRed}‚ñ∞‚ñ∞‚ñ∞ ${DGrey}[${BRed}${slowBlink} False ${resetT}${DGrey}] ${BRed}\n"
    echo "${InternetStatus}"
  fi
}
#--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ If ]--‚ïº‚ñ∞ [ User is Root ]
CheckingIfRoot(){
  ROOT_UID=0
  if [ "$UID" -eq "$ROOT_UID" ]; then
    echo "Yes, you are root."
  else
    echo "No, you are not root"
  fi
}
#--‚ïº[ ChecKing ]--‚ïº‚ñ∞ [ If ]--‚ïº‚ñ∞ [ IP = "" ]
Checking_IP_Target(){
  if [ -z $targetIP ]; then
    #statements
    clear
    # HacKingProLogo1
    ToolHeaderRun
    echo "

    ${DGrey}‚îå‚îÄ‚îÄ${BRed}[${DGrey} P ${BRed}]${BYellow}‚ïº‚ñ∞  ${BRed}[${DGrey} ‚ö°Ô∏è Planning and Scoping üéØ ${BRed}]
    ${DGrey}|
    ${DGrey}|‚îÄ‚îÄ${BRed}[${DGrey} Full Time ${BRed}]${BYellow}‚ïº‚ñ∞  ${BRed}[${DGrey} $(date) ${BRed}]
    ${DGrey}|‚îÄ‚îÄ${BRed}[${DGrey} Current Date ${BRed}]${BYellow}‚ïº‚ñ∞  ${BRed}[${DGrey} ${CurrentDate} ${BRed}]
    ${DGrey}|‚îÄ‚îÄ${BRed}[${DGrey} Starting Time ${BRed}]${BYellow}‚ïº‚ñ∞  ${BRed}[${DGrey} ${StartingTime} ${BRed}]
    ${DGrey}|
    ${DGrey}|‚îÄ‚îÄ${BRed}[ üéØ ]${DGrey}‚îÄ‚îÄ${BRed}[${DGrey}$(FunTargetIP)${BRed}]${DGrey}‚îÄ‚îÄ‚ïº  ${LRed}IP${BBlue}: ${BGreen}${targetIP}
    ${DGrey}|‚îÄ‚îÄ${BRed}[ üéØ ]${DGrey}‚îÄ‚îÄ${BRed}[${DGrey}$(FunTargetDns)${BRed}]${DGrey}‚îÄ‚îÄ‚ïº  ${LRed}Dns${BBlue}: ${BGreen}${targetDns}
    ${DGrey}|‚îÄ‚îÄ${BRed}[ üéØ ]${DGrey}‚îÄ‚îÄ${BRed}[${DGrey}$(FunTargetName)${BRed}]${DGrey}‚îÄ‚îÄ‚ïº  ${LRed}Name${BBlue}: ${BGreen}${targetNAME}
    ${DGrey}|‚îÄ‚îÄ${BRed}[ üéØ ]${DGrey}‚îÄ‚îÄ${BRed}[${DGrey}$(FunTargetEmail)${BRed}]${DGrey}‚îÄ‚îÄ‚ïº  ${LRed}Email${BBlue}: ${BGreen}${targetEmail}
    ${DGrey}|‚îÄ‚îÄ${BRed}[ üéØ ]${DGrey}‚îÄ‚îÄ${BRed}[${DGrey}$(FunTargetPhone)${BRed}]${DGrey}‚îÄ‚îÄ‚ïº  ${LRed}Phone${BBlue}: ${BGreen}${targetPhone}
    ${DGrey}|
    ${DGrey}‚îî‚îÄ‚îÄ${BRed}[${DGrey} CL ${BRed}]${BYellow}‚ïº‚ñ∞  ${BRed}[${DGrey} üßπ Cleaning Target Variables  üßπ ${BRed}] "

    echo "\n    ${BGreen}[${BRed} ERROR ${BGreen}]${BRed}‚îÄ‚îÄ‚ïº ${BGreen}[ ‚ùå ]${BRed}‚îÄ‚îÄ‚ïº  ${BGreen}[${BRed} You need Enter IP Before Scanning ${BGreen}] \n"
    sleep 1
    echo "    ${BGreen}‚îå‚îÄ‚îÄ${BRed}[${slowBlink} P${resetT}${BRed} ]${BGreen}‚îÄ‚îÄ‚ïº ${BRed}[ ‚ö°Ô∏è Planning and Scoping üéØ ]"
    sleep 1
    echo "    ${BGreen}|‚îÄ‚îÄ${BRed}[${slowBlink} P${resetT}${BRed} ]${BGreen}‚îÄ‚îÄ‚ïº ${BRed}[ ‚ö°Ô∏è Planning and Scoping üéØ ]"
    sleep 1
    echo "    ${BGreen}|‚îÄ‚îÄ${BRed}[${slowBlink} P${resetT}${BRed} ]${BGreen}‚îÄ‚îÄ‚ïº ${BRed}[ ‚ö°Ô∏è Planning and Scoping üéØ ]"
    sleep 1
    echo "    ${BGreen}|‚îÄ‚îÄ${BRed}[${slowBlink} P${resetT}${BRed} ]${BGreen}‚îÄ‚îÄ‚ïº ${BRed}[ ‚ö°Ô∏è Planning and Scoping üéØ ]"
    sleep 1
    echo "    ${BGreen}|‚îÄ‚îÄ${BRed}[${slowBlink} P${resetT}${BRed} ]${BGreen}‚îÄ‚îÄ‚ïº ${BRed}[ ‚ö°Ô∏è Planning and Scoping üéØ ]"
    sleep 1
    echo "    ${BGreen}‚îî‚îÄ‚îÄ${BRed}[${slowBlink} P${resetT}${BRed} ]${BGreen}‚îÄ‚îÄ‚ïº ${BRed}[ ‚ö°Ô∏è Planning and Scoping üéØ ]"
    sleep 1
    Press_ENTER readthat
    cd "${MainDirectoriy}"
    break
  fi

}
####################################
#------‚ïº‚ïº‚ñ∞[ ChecKing ]--‚ïº‚ñ∞ [ End ] #
####################################
