#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################################
#                     Active Directory                        #
#-Info--------------------------------------------------------#
#    Enter Your Target, Hack Him, and Get Markdown Report     #
#-About-------------------------------------------------------#
#--╼▰[ Skils ]-╼▰[ MultiMan ]                                 #
#--╼▰[ Part of ]-╼▰[ HacKingPro ]                             #
#--╼▰[ Script Name ]-╼▰[ HacKingPro-ActiveDirectory ]         #
#--╼▰[ Author ]-╼▰[ AnLoMinus ]-╼▰[ Leon Yaakobov ]           #
###############################################################
# CREDIT: To All World Creators free Scripts & Tools          #
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE          #
# GREAT SCRIPTS                                               #
# Location: Made With LOVE IN ISRAEL !                        #
###############################################################
#-Metadata----------------------------------------------------#
#--╼▰[ Version ]-╼▰[ 1.0.0 ]                                  #
#--╼▰[ Source ]-╼▰[ https://github.com/AnLoMinus/HacKingPro ] #
#--╼▰[ Created ]-╼▰[ 19-08-2022 ]                             #
#--╼▰[ Update ]-╼▰[ 29-08-2022 ]                              #
###############################################################
echo "https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-eventlog?view=powershell-5.1"
clear
ifconfig | grep UP | awk '{print $1}' | tr ":" " "
ifconfig | grep inet |  tr ":" " "
echo "\n"
read -p "    [ Enter Local IP ]--╼▰    " localIP
read -p "    [ Enter Local PORT ]--╼▰    " localPORT
read -p "    [ Enter Target IP ]--╼▰    " targetIP
read -p "    [ Enter Target PORT ]--╼▰    " targetPORT
read -p "    [ Enter Payload Name ]--╼▰    " PayloadNAME
echo "\n"

#------╼╼▰[ HacKingPro ]--╼▰ [ Active Directory Basics ]--╼▰ [ Learning Objectives ]
# What is Active Directory?
# https://tryhackme.com/room/activedirectorybasics
# Active Directory is a collection of machines and servers connected inside of domains, that are a collective part of a bigger forest of domains,
# that make up the Active Directory network.
# Active Directory contains many functioning bits and pieces, a majority of which we will be covering in the upcoming tasks.
# To outline what we'll be covering take a look over this list of Active Directory components and become familiar with the various pieces of Active Directory:
#
# The following is a list of Active Directory components that we need to be familiar with:
#
# - Forest
# - Trusts
# - Policies
# - AD objects
# - AD Domains
# - Users + Groups
# - Domain Services
# - Domain Controllers
# - Organizational Units
# - Domain Administrators
# - Forests, Trees, Domains
# - AD Service Accounts: Built-in local users, Domain users, Managed service accounts
#
# All of these parts of Active Directory come together to make a big network of machines and servers.
# Now that we know what Active Directory is let's talk about the why?

#------╼╼▰[ HacKingPro ]--╼▰ [ Breaching Active Directory ]--╼▰ [ Learning Objectives ]
# https://tryhackme.com/room/breachingad#
# In this network, we will cover several methods that can be used to breach AD.
# This is by no means a complete list as new methods and techniques are discovered every day.
# However, we will  cover the following techniques to recover AD credentials in this network:
#
# - NTLM Authenticated Services
# - LDAP Bind Credentials
# - Authentication Relays
# - Microsoft Deployment Toolkit
# - Configuration Files
#
# Network Manager -> Advanced Network Configuration -> Your Connection -> IPv4 Settings
# Set your DNS IP here to the IP for THMDC in the network diagram above
# Add another DNS such as 1.1.1.1 or similar to ensure you still have internet access
# Run sudo systemctl restart NetworkManager and test your DNS similar to the steps above.

cp /etc/systemd/resolved.conf /etc/systemd/resolved.conf.old

echo "
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it
#  under the terms of the GNU Lesser General Public License as published by
#  the Free Software Foundation; either version 2.1 of the License, or
#  (at your option) any later version.
#
# Entries in this file show the compile time defaults.
# You can change settings by editing this file.
# Defaults can be restored by simply deleting this file.
#
# See resolved.conf(5) for details
# AnLoMinus Touch
[Resolve]
DNS=${targetIP}
#FallbackDNS=
#Domains=
#LLMNR=no
#MulticastDNS=no
#DNSSEC=no
#Cache=yes
#DNSStubListener=yes
" > /etc/systemd/resolved.conf
less /etc/systemd/resolved.conf
systemctl restart systemd-resolved
systemctl restart NetworkManager
nslookup thmdc.za.tryhackme.com


# The following are Active Directory Administrators accounts:
# - BUILTIN\Administrator	Local admin access on a domain controller
# - Domain Admins	Administrative access to all resources in the domain
# - Enterprise Admins	Available only in the forest root
# - Schema Admins	Capable of modifying domain/forest; useful for red teamers
# - Server Operators	Can manage domain servers
# - Account Operators	Can manage users that are not in privileged groups

# Active Directory (AD) Enum
ADEnum(){
  echo '
  The following PowerShell command is to get all active directory user accounts.
  Note that we need to use  -Filter argument.
  Powershell:>  Get-ADUser  -Filter *

  Using the SearchBase option, we specify a specific Common-Name CN in the active directory.
  For example, we can specify to list any user(s) that part of Users.
  Get-ADUser -Filter * -SearchBase "CN=Users,DC=THMREDTEAM,DC=COM"

            [ Acronym ]
  (AV) - Antivirus Software
  (EDR) - Endpoint Detection and Response
  (HIDS) - Host-based Intrusion Detection System
  (HIPS) - Host-based Intrusion Prevention System
  '
  echo '
  Host Security Solutions

  It is a set of software applications used to monitor and detect abnormal and malicious activities within the host, including:
  - Antivirus software
  - Microsoft Windows Defender
  - Host-based Firewall
  - Security Event Logging and Monitoring
  - Host-based Intrusion Detection System (HIDS)/ Host-based Intrusion Prevention System (HIPS)
  - Endpoint Detection and Response (EDR)

  '
#   Antivirus Software (AV)
# Antivirus software also known as anti-malware, is mainly used to monitor, detect, and prevent malicious software from being executed within the host.
# Most antivirus software applications use well-known features, including Background scanning, Full system scans, Virus definitions.
# In the background scanning, the antivirus software works in real-time and scans all open and used files in the background.
# The full system scan is essential when you first install the antivirus.
# The most interesting part is the virus definitions, where antivirus software replies to the pre-defined virus.
# That's why antivirus software needs to update from time to time.

# There are various detection techniques that the antivirus uses, including
#
# Signature-based detection
# Heuristic-based detection
# Behavior-based detection
#
# We can enumerate AV software using Windows built-in tools, such as `wmic`.
echo "PS C:\Users\thm> wmic /namespace:\\root\securitycenter2 path antivirusproduct"
# This also can be done using PowerShell, which gives the same result.
echp "PS C:\Users\thm> Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntivirusProduct"
# We can use the following PowerShell command to check the service state of Windows Defender:
echo "PS C:\Users\thm> Get-Service WinDefend"
echo "PS C:\Users\thm> Get-NetFirewallProfile | Format-Table Name, Enabled"
echo "
PS C:\Windows\system32> Set-NetFirewallProfile -Profile Domain, Public, Private -Enabled False
PS C:\Windows\system32> Get-NetFirewallProfile | Format-Table Name, Enabled
"

# We can also learn and check the current Firewall rules, whether allowing or denying by the firewall.
echo "PS C:\Users\thm> Get-NetFirewallRule | select DisplayName, Enabled, Description"
# Assume we know that a firewall is in place, and we need to test inbound connection without extra tools, then we can do the following:
echo "PS C:\Users\thm> Test-NetConnection -ComputerName 127.0.0.1 -Port 80  "

# Security Event Logging and Monitoring
# We can get a list of available event logs on the local machine using the Get-EventLog cmdlet.
echo "PS C:\Users\thm> Get-EventLog -List"
echo "
Microsoft documents website

Microsoft.PowerShell.Management

Add-Computer
Add the local computer to a domain or workgroup.

Add-Content
Adds content to the specified items, such as adding words to a file.

Checkpoint-Computer
Creates a system restore point on the local computer.

Clear-Content
Deletes the contents of an item, but does not delete the item.

Clear-EventLog
Clears all entries from specified event logs on the local or remote computers.

Clear-Item
Clears the contents of an item, but does not delete the item.

Clear-ItemProperty
Clears the value of a property but does not delete the property.

Clear-RecycleBin
Clears the contents of a recycle bin.

Complete-Transaction
Commits the active transaction.

Convert-Path
Converts a path from a PowerShell path to a PowerShell provider path.

Copy-Item
Copies an item from one location to another.

Copy-ItemProperty
Copies a property and value from a specified location to another location.

Debug-Process
Debugs one or more processes running on the local computer.

Disable-ComputerRestore
Disables the System Restore feature on the specified file system drive.

Enable-ComputerRestore
Enables the System Restore feature on the specified file system drive.

Get-ChildItem
Gets the items and child items in one or more specified locations.

Get-Clipboard
Gets the current Windows clipboard entry.

Get-ComputerInfo
Gets a consolidated object of system and operating system properties.

Get-ComputerRestorePoint
Gets the restore points on the local computer.

Get-Content
Gets the content of the item at the specified location.

Get-ControlPanelItem
Gets control panel items.

Get-EventLog
Gets the events in an event log, or a list of the event logs, on the local computer or remote computers.

Get-HotFix
Gets the hotfixes that are installed on local or remote computers.

Get-Item
Gets the item at the specified location.

Get-ItemProperty
Gets the properties of a specified item.

Get-ItemPropertyValue
Gets the value for one or more properties of a specified item.

Get-Location
Gets information about the current working location or a location stack.

Get-Process
Gets the processes that are running on the local computer or a remote computer.

Get-PSDrive
Gets drives in the current session.

Get-PSProvider
Gets information about the specified PowerShell provider.

Get-Service
Gets the services on a local or remote computer.

Get-TimeZone
Gets the current time zone or a list of available time zones.

Get-Transaction
Gets the current (active) transaction.

Get-WmiObject
Gets instances of Windows Management Instrumentation (WMI) classes or information about the available classes.

Invoke-Item
Performs the default action on the specified item.

Invoke-WmiMethod
Calls WMI methods.

Join-Path
Combines a path and a child path into a single path.

Limit-EventLog
Sets the event log properties that limit the size of the event log and the age of its entries.

Move-Item
Moves an item from one location to another.

Move-ItemProperty
Moves a property from one location to another.

New-EventLog
Creates a new event log and a new event source on a local or remote computer.

New-Item
Creates a new item.

New-ItemProperty
Creates a new property for an item and sets its value.

New-PSDrive
Creates temporary and persistent drives that are associated with a location in an item data store.

New-Service
Creates a new Windows service.

New-WebServiceProxy
Creates a Web service proxy object that lets you use and manage the Web service in PowerShell.

Pop-Location
Changes the current location to the location most recently pushed onto the stack.

Push-Location
Adds the current location to the top of a location stack.

Register-WmiEvent
Subscribes to a Windows Management Instrumentation (WMI) event.

Remove-Computer
Removes the local computer from its domain.

Remove-EventLog
Deletes an event log or unregisters an event source.

Remove-Item
Deletes the specified items.

Remove-ItemProperty
Deletes the property and its value from an item.

Remove-PSDrive
Deletes temporary PowerShell drives and disconnects mapped network drives.

Remove-WmiObject
Deletes an instance of an existing Windows Management Instrumentation (WMI) class.

Rename-Computer
Renames a computer.

Rename-Item
Renames an item in a PowerShell provider namespace.

Rename-ItemProperty
Renames a property of an item.

Reset-ComputerMachinePassword
Resets the machine account password for the computer.

Resolve-Path
Resolves the wildcard characters in a path, and displays the path contents.

Restart-Computer
Restarts the operating system on local and remote computers.

Restart-Service
Stops and then starts one or more services.

Restore-Computer
Starts a system restore on the local computer.

Resume-Service
Resumes one or more suspended (paused) services.

Set-Clipboard
Sets the current Windows clipboard entry.

Set-Content
Writes new content or replaces existing content in a file.

Set-Item
Changes the value of an item to the value specified in the command.

Set-ItemProperty
Creates or changes the value of a property of an item.

Set-Location
Sets the current working location to a specified location.

Set-Service
Starts, stops, and suspends a service, and changes its properties.

Set-TimeZone
Sets the system time zone to a specified time zone.

Set-WmiInstance
Creates or updates an instance of an existing Windows Management Instrumentation (WMI) class.

Show-ControlPanelItem
Opens control panel items.

Show-EventLog
Displays the event logs of the local or a remote computer in Event Viewer.

Split-Path
Returns the specified part of a path.

Start-Process
Starts one or more processes on the local computer.

Start-Service
Starts one or more stopped services.

Start-Transaction
Starts a transaction.

Stop-Computer
Stops (shuts down) local and remote computers.

Stop-Process
Stops one or more running processes.

Stop-Service
Stops one or more running services.

Suspend-Service
Suspends (pauses) one or more running services.

Test-ComputerSecureChannel
Tests and repairs the secure channel between the local computer and its domain.

Test-Connection
Sends ICMP echo request packets, or pings, to one or more computers.

Test-Path
Determines whether all elements of a path exist.

Undo-Transaction
Rolls back the active transaction.

Use-Transaction
Adds the script block to the active transaction.

Wait-Process
Waits for the processes to be stopped before accepting more input.

Write-EventLog
Writes an event to an event log.


https://learn.microsoft.com/en-us/powershell/module/cimcmdlets/?view=powershell-5.1
https://learn.microsoft.com/en-us/powershell/module/cimcmdlets/?view=powershell-7.2

## [ CimCmdlets ]
Get-CimAssociatedInstance
Retrieves the CIM instances that are connected to a specific CIM instance by an association.

Get-CimClass
Gets a list of CIM classes in a specific namespace.

Get-CimInstance
Gets the CIM instances of a class from a CIM server.

Get-CimSession
Gets the CIM session objects from the current session.

Import-BinaryMiLog
Used to re-create the saved objects based on the contents of an export file.

Invoke-CimMethod
Invokes a method of a CIM class.

New-CimInstance
Creates a CIM instance.

New-CimSession
Creates a CIM session.

New-CimSessionOption
Specifies advanced options for the New-CimSession cmdlet.

Register-CimIndicationEvent
Subscribes to indications using a filter expression or a query expression.

Remove-CimInstance
Removes a CIM instance from a computer.

Remove-CimSession
Removes one or more CIM sessions.

Set-CimInstance
Modifies a CIM instance on a CIM server by calling the ModifyInstance method of the CIM class.


"
# We can look for a process or service that has been named "Sysmon" within the current process or services as follows,
PS C:\Users\thm> Get-Process | Where-Object { $_.ProcessName -eq "Sysmon" }
OR
PS C:\Users\thm> Get-CimInstance win32_service -Filter "Description = 'System Monitor service'"
# It also can be done by checking the Windows registry
PS C:\Users\thm> reg query

# All these commands confirm if the sysmon tool is installed.
# Once we detect it, we can try to find the sysmon configuration file if we have readable permission to understand what system administrators are monitoring.
PS C:\Users\thm> findstr /si '<ProcessCreate onmatch="exclude">' C:\tools\*

}
# Sysinternals Suite
echo "
PowerShell command:
Download-SysInternalsTools C:\Sysinternals

Website: https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite

"
